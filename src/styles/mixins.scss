@charset "UTF-8";

@mixin tag($border-color: var(--color-3)) {
	// display: inline-block;
	padding-block: 0.333em;
	padding-inline: 0.666em;
	border-radius: 9999px;
	border: 1px solid $border-color;
	transition: background-color 0.125s;
}

@mixin hover-text($hover-color: var(--color-3), $withOpacity: false, $opacity: 0.5) {
	@if $withOpacity == true {
		transition: opacity 0.125s, color 0.125s;
		@media (any-hover: hover) {
			&:hover {
				opacity: $opacity;
			}
		}
	} @else {
		transition: color 0.125s;
		@media (any-hover: hover) {
			&:hover {
				color: $hover-color;
			}
		}
	}
}

@mixin hover-image() {
	img {
		filter: grayscale(1);
		transition: filter 0.125s;
	}
	@media (any-hover: hover) {
		&:hover img {
			filter: grayscale(0);
		}
	}
}

@mixin ellipsis() {
	overflow: hidden;
	overflow: clip;
	white-space: nowrap;
	text-overflow: ellipsis;
}

@mixin ellipsis-multiline($lines: 3) {
	display: -webkit-box;
	-webkit-line-clamp: $lines;
	-webkit-box-orient: vertical;
	overflow: hidden;
	overflow: clip;
}

@mixin polka-dot-background($density: 2, $dot-color: var(--color-4), $background-color: transparent) {
	background-image: radial-gradient($dot-color 1px, $background-color 1px), radial-gradient($dot-color 1px, $background-color 1px);
	background-size: calc(var(--spacer-400) / $density) calc(var(--spacer-400) / $density);
	background-position: 0 0, calc(var(--spacer-400) / ($density * 2)) calc(var(--spacer-400) / ($density * 2));
}

@mixin stroke($color: var(--color-7)) {
	@supports (-webkit-text-stroke: 0.5em $color) {
		position: relative;
		z-index: 0;
		&::before {
			content: attr(data-content);
			position: absolute;
			left: 0;
			z-index: -1;
			-webkit-text-stroke: 0.5em $color;
		}
	}
}

@mixin link() {
	background-image: linear-gradient(to bottom, var(--color-4), var(--color-4));
	background-size: 1px 2px;
	background-repeat: repeat-x;
	background-position: 0 100%;
	// color: var(--color-1);
}

@mixin comma-separated-list($separator: ",", $connector: "and") {
	& {
		display: inline;
	}
	&:not(:first-of-type:nth-last-of-type(2)):not(:last-of-type)::after {
		content: "#{$separator} ";
	}
	&:last-of-type:not(:first-of-type)::before {
		content: " #{$connector} ";
	}
}

@mixin hoverable-area($from-background-color: transparent, $to-background-color: var(--color-6), $before: false) {
	@if $before {
		&::before {
			background: $from-background-color;
			transition: background-color 0.125s;
		}
		@media (any-hover: hover) {
			&:hover::before {
				background: $to-background-color;
			}
		}
	} @else {
		background: $from-background-color;
		transition: background-color 0.125s;
		@media (any-hover: hover) {
			&:hover {
				background: $to-background-color;
			}
		}
	}
}

@mixin boxed-area() {
	border: 1px solid var(--color-5);
	box-shadow:
		calc(var(--spacer-100) * -1) var(--spacer-100) 0px -1px var(--color-7),
		calc(var(--spacer-100) * -1) var(--spacer-100) var(--color-5),
		calc(var(--spacer-100) * -2) calc(var(--spacer-100) * 2) 0px -1px var(--color-7),
		calc(var(--spacer-100) * -2) calc(var(--spacer-100) * 2) var(--color-5);
	margin-left: calc(var(--spacer-100) * 2);
	margin-bottom: calc(var(--spacer-100) * 2);
	@media (min-width: 1025px) {
		.column:first-of-type & {
			margin-left: 0;
		}
	}
}

@mixin no-scrollbar() {
	scrollbar-width: none; /* Firefox */
	-ms-overflow-style: none; /* Internet Explorer 10+ */
	&::-webkit-scrollbar { /* WebKit */
		width: 0;
		height: 0;
	}
}