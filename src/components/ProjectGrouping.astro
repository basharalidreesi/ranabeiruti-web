---
import ComplexDate from "@components/ComplexDate.astro";
import Image from "@components/Image.astro";
import Link from "@components/Link.astro";
import { LOCALES } from "@lib/locales";
import type { ProjectGroupingProps } from "@lib/types";

export type Props = {
	source: ProjectGroupingProps;
	keys?: string[],
	baseUrl: string;
};

const {
	source = {},
	keys = null,
	baseUrl = "",
} = Astro.props;

const resolvedSource = keys ? keys : Object.keys(source);
---

{resolvedSource?.map((key) => (<>
	<section id={key} class="record-group" data-size={source[key]?.projects?.length || "0"} aria-label={source[key]?.description ? source[key]?.description : null}>
		<h3 class="record-group-title" role="presentation" aria-hidden="true">{source[key]?.title}</h3>
		{source[key]?.projects?.map((project) => {
			return (
				<article class="record" data-start-date={project.date.startDate} data-end-date={project.date.endDate} data-expanded="false" aria-label={project.title}>
					<div class="record-title">
						<h4>
							<Link href={`/${baseUrl}/${project.slug.current}/`} class="hover-text">
								<strong class="record-title-baseline">{project.title?.trim()}{project.subtitle && (<span class="record-title-colon">:&nbsp;</span>)}</strong>{project.subtitle && (<span class="record-subtitle">{project.subtitle?.trim()}</span>)}
							</Link>
						</h4>
					</div>
					<div class="record-date" data-format={project.date.dateFormat}>
						<ComplexDate source={project.date} />
					</div>
					<dl class="record-tags" aria-label="Tags">
						<div class="record-types" data-has-value={project.types && project.types.length !== 0 ? "true" : "false"}>
							<dt class="display-none">Types</dt>
							{project.types?.map((type) => (
								<dd>{type.name?.trim()}</dd>
							)) || (
								<dd aria-hidden="true">∅</dd>
							)}
						</div>
						<div class="record-collections" data-has-value={project.collections && project.collections.length !== 0 ? "true" : "false"}>
							<dt class="display-none">Collections</dt>
							{project.collections?.map((collection) => (
								<dd>{collection.name?.trim()}</dd>
							)) || (
								<dd aria-hidden="true">∅</dd>
							)}
						</div>
						<div class="record-subjects" data-has-value={project.subjects && project.subjects.length !== 0 ? "true" : "false"}>
							<dt class="display-none">Subjects</dt>
							{project.subjects?.map((subject) => (
								<dd>{subject.name?.trim()}</dd>
							)) || (
								<dd aria-hidden="true">∅</dd>
							)}
						</div>
						<div class="record-locations" data-has-value={project.locations && project.locations.length !== 0 ? "true" : "false"}>
							<dt class="display-none">Locations</dt>
							{project.locations?.map((location) => (
								<dd>{location.name?.trim()}, {LOCALES.find((locale) => locale.value === location.locale)?.title}</dd>
							)) || (
								<dd aria-hidden="true">∅</dd>
							)}
						</div>
					</dl>
					<div class="record-description" data-contains={[project.description ? "project" : null, project.collections && project.collections.length !== 0 && project.collections.filter((collection) => collection.description).length !== 0 ? "collection" : null]?.filter(Boolean)?.join(" ")}>
						{project.description && (
							<p class="project-description">{project.description}</p>
						)}
						{project.collections && project.collections.length !== 0 && project.collections.filter((collection) => collection.description).length !== 0 && (
							project.collections.map((collection) => (
								<p class="collection-description">{collection.description}</p>
							))
						)}
					</div>
					<div class="record-image">
						<Image source={project.image} />
					</div>
				</article>
			);
		})}
	</section>
</>))}

<style lang="scss" is:global>
	.record-group {
		display: grid;
		grid-template-columns: 15% 1fr 15%;
		column-gap: 1.5rem;
		&[data-size="0"] {
			display: none;
		}
		* {
			min-width: 0;
			min-height: 0;
		}
	}
	.record-group-title {
		grid-column: 1/2;
		position: sticky;
		top: var(--header-height);
		z-index: 99;
		height: fit-content;
		padding-block: 0.75rem;
		color: var(--color-2);
		text-wrap: balance;
	}
	.record {
		grid-column: 2/3;
	}
	#dataset[data-view="cards"] .listing[data-view-mode~="cards"],
	#project #project-related[data-view-mode="cards"] {
		& {
			padding-block: 0.75rem;
		}
		.record-collections,
		.record-subjects,
		.collection-description {
			display: none;
		}
		.record {
			position: relative;
			display: grid;
			grid-template-columns: 2fr 3fr;
			grid-template-rows: auto auto 1fr auto;
			column-gap: 1.5rem;
			row-gap: 0.75rem;
			padding: 0.75rem;
			background: transparent;
			transition: background-color 0.125s;
			@media (any-hover: hover) {
				&:hover {
					background: var(--color-6);
				}
			}
		}
		.record-image {
			grid-column: 1/2;
		}
		.record-title,
		.record-tags,
		.record-date,
		.record-description {
			grid-column: 2/3;
		}
		.record-title {
			grid-row: 1/2;
		}
		.record-title a {
			color: var(--color-1);
		}
		.record-title a::after {
			content: "";
			position: absolute;
			inset: 0;
			z-index: 1;
		}
		.record-title-baseline {
			text-transform: uppercase;
			font-weight: var(--font-weight-bold);
		}
		.record-title-colon {
			opacity: 0;
			position: absolute;
		}
		.record-subtitle {
			display: block;
			margin-block-start: 0.5rem;
		}
		.record-date {
			grid-row: 2/3;
			font-size: var(--font-size-small);
			color: var(--color-2);
		}
		.record-date[data-format="yearOnly"] {
			display: none;
		}
		.record-date[data-format="yearOnly"] ~ .record-description {
			margin-block-start: -0.75rem;
			min-height: calc(100% + 0.75rem);
		}
		.record-description {
			grid-row: 3/4;
			height: 0;
			min-height: 100%;
			overflow: hidden;
			overflow: clip;
			-webkit-mask: linear-gradient(to bottom, black, black calc(100% - 1.25rem), transparent);
			mask: linear-gradient(to bottom, black, black calc(100% - 1.25rem), transparent);
			font-size: var(--font-size-small);
			color: var(--color-2);
		}
		.record-description:not([data-contains="project"]) {
			display: none;
		}
		.record-tags {
			grid-row: 4/5;
			padding-block-end: 0.75rem;
			font-size: var(--font-size-small);
			color: var(--color-1);
			[data-has-value="false"] {
				display: none;
			}
		}
		.record-tags,
		.record-types,
		.record-locations {
			display: flex;
			flex-wrap: wrap;
			column-gap: 0.75rem;
			row-gap: 0.25rem;
		}
		.record-image {
			grid-row: 1/5;
			img {
				display: block;
				height: 100%;
				width: 100%;
				object-fit: cover;
				aspect-ratio: 16/9;
			}
		}
	}
	@media (max-width: 1280px) {
		.record-group {
			grid-template-columns: 15% 1fr;
		}
	}
	@media (min-width: 1025px) {
		#dataset[data-view="list"] .listing[data-view-mode~="list"],
		#project #project-related[data-view-mode="list"] {
			.record {
				position: relative;
				display: grid;
				grid-template-columns: 2fr 1fr 2fr auto;
				border-block-end: 1px solid var(--color-6);
				background: transparent;
				transition: background-color 0.125s;
				&::after {
					grid-column: 4/5;
					width: 1ch;
					height: 1.3rem;
					margin: 0.75rem;
					color: var(--color-4);
					font-size: var(--font-size-medium);
					font-family: var(--font-family-mono);
					line-height: 1.6;
				}
				@media (any-hover: hover) {
					&:hover {
						background: var(--color-6);
					}
				}
			}
			.record-subjects,
			.record-locations {
				display: none;
			}
			.record[data-expanded="true"] {
				margin-block-start: -1px;
				background: var(--color-6);
				border-block-end: 1px solid var(--color-5);
				border-block-start: 1px solid var(--color-5);
				&::after {
					content: "×";
					content: "×" / "";
					color: var(--color-3);
				}
			}
			.record:not([data-expanded="true"]) {
				.record-description,
				.record-image {
					display: none;
				}
				&::after {
					content: "+";
					content: "+" / "";
				}
			}
			.record-title,
			.record-date,
			.record-tags {
				padding: 0.75rem;
			}
			.record-date,
			.record-tags {
				color: var(--color-2);
			}
			.record-title {
				position: relative;
				grid-column: 1/2;
			}
			.record-title a::after {
				content: "";
				display: block;
				position: absolute;
				inset: 0;
				bottom: -1px;
			}
			.record-title-baseline {
				font-weight: var(--font-weight-bold);
			}
			.record-date {
				grid-column: 2/3;
				padding: 0.75rem;
				.date-baseline {
					display: none;
				}
			}
			.record-tags {
				grid-column: 3/4;
				padding: 0.75rem;
				display: grid;
				grid-template-columns: 1fr 1fr;
				gap: 1.5rem;
			}
			.record-types {
				grid-column: 1/2;
			}
			.record-collections {
				grid-column: 2/3;
			}
			.record-types,
			.record-collections {
				dd {
					display: inline;
				}
				dd:not(:last-of-type)::after {
					content: ", ";
				}
			}
			.record-image {
				grid-column: 1/2;
				grid-row: 2/3;
				padding-inline: 0.75rem;
				padding-block-end: 1.15rem;
			}
			.record-description {
				grid-column: 2/5;
				grid-row: 2/3;
				padding-inline: 0.75rem;
				padding-block-end: 1.15rem;
				color: var(--color-2);
				font-size: var(--font-size-small);
			}
			.record-description p + p {
				margin-block-start: 0.5rem;
			}
		}
	}
	@media (max-width: 1024px) {
		.record-group {
			grid-template-columns: unset;
		}
		.record-group-title {
			grid-column: unset;
			position: revert;
			top: revert;
			z-index: revert;
		}
		.record {
			grid-column: unset;
		}
		#dataset[data-view="cards"] .listing[data-view-mode~="cards"],
		#project #project-related[data-view-mode="cards"] {
			.record {
				column-gap: 1rem;
				row-gap: 0.5rem;
				padding-inline: 0;
				@media (any-hover: hover) {
					&:hover {
						background: transparent;
					}
				}
			}
			.record-subtitle {
				margin-block-start: 0.25rem;
			}
			.record-date[data-format="yearOnly"] ~ .record-description {
				margin-block-start: -0.5rem;
				min-height: calc(100% + 0.5rem);
			}
			.record-tags {
				padding-block-end: 0.5rem;
			}
		}
		#dataset[data-view="list"] .listing[data-view-mode~="list"],
		#project #project-related[data-view-mode="list"] {
			& {
				padding-block: 0.75rem;
			}
			.record {
				padding-block: 0.75rem;
				margin-inline-start: 1.5rem;
			}
			.record::before {
				content: "•";
				content: "•" / "";
				display: inline-block;
				margin-inline-start: -1.5rem;
				margin-block-start: 0.1ch;
				padding-inline-end: calc(1.5rem - 1ch);
				font-family: var(--font-family-mono);
				vertical-align: top;
				color: var(--color-3);
			}
			.record-title {
				display: inline-block;
				width: 100%;
				margin-block-end: 0.25rem;
				text-wrap: balance;
			}
			.record-title-baseline {
				font-weight: var(--font-weight-bold);
			}
			.record-date,
			.record-date * {
				display: inline;
			}
			.record-date::after {
				content: ", ";
			}
			.record-types[data-has-value="true"] + .record-collections[data-has-value="true"]::before {
				content: ", ";
			}
			.record-tags > [data-has-value="false"] {
				display: none;
			}
			.record-tags,
			.record-types,
			.record-types dd,
			.record-collections,
			.record-collections dd {
				display: inline;
			}
			.record-types > dd:not(:last-of-type)::after,
			.record-collections > dd:not(:last-of-type)::after {
				content: ", ";
			}
			.record-subjects,
			.record-locations {
				display: none;
			}
			.record-description {
				display: none;
			}
			.record-image {
				display: none;
			}
			.record-date,
			.record-tags {
				color: var(--color-2);
				font-size: var(--font-size-medium);
			}
		}
	}
	@media (max-width: 768px) {
		#dataset[data-view="cards"] .listing[data-view-mode~="cards"],
		#project #project-related[data-view-mode="cards"] {
			.record {
				grid-template-columns: 3fr 2fr;
			}
		}
		#dataset[data-view="list"] .listing[data-view-mode~="list"],
		#project #project-related[data-view-mode="list"] {
			.record {
				grid-template-columns: 1fr 1fr 2fr;
			}
		}
	}
	@media (max-width: 640px) {
		#dataset[data-view="cards"] .listing[data-view-mode~="cards"],
		#project #project-related[data-view-mode="cards"] {
			.record {
				grid-template-columns: unset;
				grid-template-rows: unset;
				display: flex;
				flex-direction: column;
			}
			.record-image {
				order: 1;
			}
			.record-title {
				order: 2;
			}
			.record-date {
				order: 3;
			}
			.record-date[data-format="yearOnly"] ~ .record-description {
				min-height: revert;
				margin-block-start: revert;
			}
			.record-description {
				order: 4;
				max-height: calc(3em * 1.3);
				height: revert;
				min-height: revert;
			}
			.record-tags {
				order: 5;
				padding: 0;
			}
		}
	}
</style>

<script>
	const records = document.querySelectorAll(".record");
	records.forEach((record) => {
		record.addEventListener("click", handleRecordClick);
	});
	function handleRecordClick(event: Event) {
		if ((event.target as HTMLElement).closest("a")) { return; };
		const closestRecord = (event.target as HTMLElement).closest(".record");
		if (closestRecord.getAttribute("data-expanded") === "false") {
			closestRecord.setAttribute("data-expanded", "true");
		} else {
			if ((event.target as HTMLElement).closest("p, img, span, dd, time")) { return; };
			closestRecord.setAttribute("data-expanded", "false");
		};
		return;
	};
</script>