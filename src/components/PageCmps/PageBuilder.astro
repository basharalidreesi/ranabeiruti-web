---
import PageBuilderColumn from "@components/PageCmps/PageBuilderColumn.astro";
import PortableText from "@components/PortableText.astro";
import PageBuilderRow from "@components/PageCmps/PageBuilderRow.astro";
import type { TypedObject } from "astro-portabletext/types";

export type VerticalAlignments = "top" | "middle" | "bottom";

export type CaptionPlacements = "left" | "top" | "right" | "bottom";

export type PageBuilderProps = {
	columns: {
		_type: "column";
		ratio: number;
		verticalAlignment: VerticalAlignments;
		content: TypedObject[];
	}[];
	doesBreakout: boolean;
};

export type Props = {
	source: PageBuilderProps[];
};

const {
	source,
} = Astro.props;
---

{source ? source?.map((row, index) => {
	if (row.columns.filter((column) => {
		switch (column._type) {
			case "column": return (!column.content || column.content?.length === 0) ? true : false;
			default: return true;
		};
	})?.length === row.columns.length) {
		return null;
	};
	return (
		<PageBuilderRow index={index + 1} doesBreakout={row.doesBreakout}>
			{row.columns?.map((column, index) => {
				const ratio = Math.max(column.ratio, 1) || 1;
				const verticalAlignment = column.verticalAlignment;
				switch (column._type) {
					case "column": {
						if (column.content && column.content.length !== 0) {
							return (
								<PageBuilderColumn ratio={ratio} verticalAlignment={verticalAlignment} index={index + 1}>
									<PortableText source={column.content} />
								</PageBuilderColumn>
							);
						};
						return (
							<PageBuilderColumn ratio={ratio} verticalAlignment={verticalAlignment} index={index + 1} />
						);
					};
					default: return null;
				};
			})}
		</PageBuilderRow>
	);
}) : null}