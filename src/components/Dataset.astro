---
import ComplexDate from "@components/ComplexDate.astro";
import Image from "@components/Image.astro";
import Link from "@components/Link.astro";
import TitleAndSubtitle from "@components/TitleAndSubtitle.astro";
import SimpleDate from "@components/SimpleDate.astro";
import { LOCALES } from "@lib/locales";
import type { BaseUrls, CollectionProps, SanityImageMetadataObject, SubjectProps, TagTypes, TypeProps } from "@lib/types";
import type { BasicProjectProps } from "@projects/[slug].astro";
import type { PressItemProps } from "@press/index.astro";
import type { SanityImageObject } from "@sanity/image-url/lib/types/types";
import type { TypedObject } from "astro-portabletext/types";
import PortableText from "./PortableText.astro";
import { string } from "astro/zod";

type BasicPublicationProps = {
	type: "publication";
	slug: { current: string; };
	title: string;
	subtitle: string;
	date: string;
	types: TypeProps[];
	subjects?: SubjectProps[];
	collections?: CollectionProps[];
	image: SanityImageObject & SanityImageMetadataObject;
	description: TypedObject[] | string;
};

type DatasetRecordProps = BasicProjectProps | BasicPublicationProps | PressItemProps;

export type DatasetGroupingProps = {
	[key: string]: {
		title: string;
		records: DatasetRecordProps[];
		description?: string;
	};
};

export function assignRecordToGrouping(record: DatasetRecordProps, params: { grouping: DatasetGroupingProps; key: string; title: string; description: string; }) {
	const {
		grouping,
		key,
		title,
		description,
	} = params;
	if (!grouping[key]) {
		grouping[key] = {
			title: title,
			records: [],
			description: description,
		};
	};
	if (grouping[key] && grouping[key].records) {
		grouping[key].records.push(record);
	};
};

type NewProps = {
	groupings: ({
		name: string;
		title: string;
		description: string;
		object: {}[];
		orderings?: string[];
	} & ({
		type: "details";
		options?: {
			imageAspectRatio?: string;
			tags?: string[];
		};
	} | {
		type: "list";
		rows: ({
			type: "main";
			columns: {
				name: string;
				title: string;
			}[];
		} | {
			type: "expanded";
			columns: {
				name: string;
			}[];
		})[];
	} | {
		type: "covers";
		options?: {
			imageAspectRatio?: string;
			tags?: string[];
		};
	} | {
		type: "headlines";
	}))[];
	baseUrls: BaseUrls;
	filters?: {
		name: string;
		title: string;
		items: {
			slug: {
				current: string;
			};
			name: string;
			size: number;
		}[];
		size: number;
	}[];
};

type Props = {
	type: "projects" | "publications" | "press";
	of: ({
		type: "title";
		baseUrl: string;
	} | {
		type: "date";
	} | {
		type: "tags";
		tags: TagTypes[];
		length: number;
	} | {
		type: "description";
		descriptions: ("local" | "collections")[];
	} | {
		type: "image";
	} | {
		type: "body";
	} | {
		type: "related";
		baseUrls: BaseUrls;
	})[];
	groupings: {
		title: string;
		label?: string;
		method: "title" | "date" | "types" | "collections";
		object: DatasetGroupingProps;
		keys?: string[];
		default?: boolean;
		"columns@>=1536px": string;
		"columns@<1536px": string;
		"columns@<=1280px": string;
	}[];
	controls: {
		views: ({
			title: string;
			default?: boolean;
		} & ({
			mode: "cards" | "covers" | "headlines";
		} | {
			mode: "list";
			"columns@>1024px": string;
			"columns@<=1024px": string;
		}))[];
		filters?: {
			title: string;
			method: TagTypes;
			object: DatasetGroupingProps;
			keys?: string[];
		}[];
	};
};

const {
	type,
	of,
	groupings,
	controls,
} = Astro.props;

const titleSchema = of && of.length !== 0 && of.find((schemaItem) => schemaItem.type === "title");
const baseUrl = titleSchema && titleSchema.type === "title" && titleSchema.baseUrl;
const tagSchema = of && of.length !== 0 && of.find((schemaItem) => schemaItem.type === "tags");
const length = tagSchema && tagSchema.type === "tags" && tagSchema.length;

const defaultGrouping = groupings && groupings.length !== 0 && groupings.find((grouping) => grouping.default === true)?.method;
const defaultView = controls && controls.views && controls.views.length !== 0 && controls.views.find((view) => view.default === true)?.mode;
const hasFilterOptions = controls && controls.filters && controls.filters.length !== 0;
const hasViewOptions = controls && controls.views && controls.views.length > 1;

const listSchema = groupings && groupings.length > 1 && controls && controls.views && controls.views.find((view) => view.mode === "list");
const hasListSchema = listSchema && listSchema.mode === "list";
---

<div id="dataset"
	data-current-grouping={defaultGrouping}
	data-current-view={defaultView}
	style={{
		"--list-columns-gt-1024px": hasListSchema && listSchema["columns@>1024px"],
		"--list-columns-lte-1024px": hasListSchema && listSchema["columns@<=1024px"],
	}}
>
	{(hasFilterOptions || hasViewOptions) && (
		<aside id="controls-outer" aria-labelledby="controls-title">
			<h2 id="controls-title" class="display-none">{[hasFilterOptions ? "Filtering" : null, hasViewOptions ? "Viewing" : null]?.filter(Boolean)?.join(" and ")} Options</h2>
			<div id="controls-inner">
				{hasFilterOptions && (
					<section id="filters">
						<h3 class="control-group-title">Filter by</h3>
						<div class="control-group">
							{controls.filters.map((filter) => filter.object && Object.keys(filter.object) && Object.keys(filter.object)?.filter((key) => key !== "other").length !== 0 && (
								<div class="control">
									<input type="checkbox" name="filter-by" id={`filter-by-${filter.method}`} value={filter.method} autocomplete="off" />
									<label class="hover-text" for={`filter-by-${filter.method}`}>{filter.title}</label>
								</div>
							))}
						</div>
					</section>
				)}
				{hasViewOptions && (
					<section id="views">
						<h3 class="control-group-title">View as</h3>
						<div class="control-group">
							{controls.views.map((view) => (
								<div class="control">
									<input type="radio" name="view-as" id={`view-as-${view.mode}`} value={view.mode} autocomplete="off" checked={view.default} />
									<label class="hover-text" for={`view-as-${view.mode}`}>{view.title}</label>
								</div>
							))}
						</div>
					</section>
				)}
				{hasFilterOptions && (
					<section id="tags" data-current-filter="none">
						<h3 class="display-none">Tags</h3>
						{controls.filters.map((filter) => {
							const keys = filter.keys ? filter.keys : Object.keys(filter.object);
							return (
								<ul data-filter={filter.method}>
									<li>
										<Link href={`/${baseUrl}/`} class="hover-text" data-size={length}>All</Link>
									</li>
									{keys.map((key) => (
										<li>
											<Link href={`/${baseUrl}/?${filter.method}=${key}`} class="hover-text" data-size={filter.object[key].records.length}>{filter.object[key].title}</Link>
										</li>
									))}
								</ul>
							)
						})}
					</section>
					// <section id="pills" class="display-none">
					// 	<h3 class="display-none">Active Tags</h3>
					// 	<template></template>
					// 	<ul class="ln"></ul>
					// </section>
				)}
			</div>
		</aside>
	)}
	{hasListSchema && (
		<section id="sorts" aria-labelledby="sorts-title">
			<h2 id="sorts-title" class="display-none">Sorting Options</h2>
			<div id="sorts-inner">
				{groupings.map((grouping) => (
					<div class="sort control">
						<input type="radio" name="sort-by" id={`sort-by-${grouping.method}`} value={grouping.method} autocomplete="off" checked={grouping.default} />
						<label for={`sort-by-${grouping.method}`}>{grouping.label || grouping.title}</label>
					</div>
				))}
			</div>
		</section>
	)}
	{groupings && groupings.length !== 0 && groupings.map((grouping) => {
		const keys = grouping.keys ? grouping.keys : Object.keys(grouping.object);
		return (
			<section
				class="listing"
				data-grouping={grouping.method}
				data-default={grouping.default ? "true" : "false"}
				aria-label={grouping.title}
				style={{
					"--grouping-columns-gte-1536px": grouping["columns@>=1536px"],
					"--grouping-columns-lt-1536px": grouping["columns@<1536px"],
					"--grouping-columns-lte-1280px": grouping["columns@<=1280px"],
				}}
			>
				<h2 class="display-none" aria-hidden="true">{grouping.title}</h2>
				{keys?.map((key) => (<>
					<section id={`${grouping.method}-group-${key}`} class="record-group" data-type={type} data-size={grouping.object[key]?.records?.length || "0"} aria-label={grouping.object[key]?.description && grouping.object[key]?.description}>
						<h3 class="record-group-title" role="presentation" aria-hidden="true">{grouping.object[key]?.title}</h3>
						{grouping.object[key]?.records?.map((record) => {
							const isProjectRecord = record.type === "project";
							const isPublicationRecord = record.type === "publication";
							const isNewsRecord = record.type === "news";
							const isPressRecord = record.type === "press";
							const hasLocalDescription = (isProjectRecord || isPublicationRecord || isNewsRecord || isPressRecord) && record.description && record.description.length !== 0;
							const hasCollectionDescriptions = (isProjectRecord || isPublicationRecord) && record.collections && record.collections.length !== 0 && record.collections.filter((collection) => collection.description).length !== 0;
							const hasBody = isNewsRecord && record.body && record.body.length !== 0;
							const hasRelated = (isNewsRecord || isPressRecord) && record.relatedProjects && record.relatedProjects.length !== 0;
							return (
								<article
									id={isNewsRecord && `news-${record.slug.current}`}
									class="record"
									data-type={record.type}
									data-start-date={isProjectRecord ? record.date.startDate : record.date}
									data-end-date={isProjectRecord ? record.date.endDate : record.date}
									data-expanded="false"
									aria-label={record.title}
									style={{
										"--color-image-background": record.image?.metadata?.palette?.darkMuted?.background,
										"--color-image-foreground": record.image?.metadata?.palette?.darkMuted?.title,
									}}
								>
									{of && of.length !== 0 && of.map((schemaItem) => {
										switch (schemaItem.type) {
											case "title": return (
												<div class="record-title">
													<h4>
														<Link
															href={
																(isProjectRecord || isPublicationRecord) ? `/${baseUrl}/${record.slug.current}/`
																: isNewsRecord ? `#${record.slug.current}`
																: isPressRecord ? record.url
																: null
															}
														>
															<TitleAndSubtitle
																classPrefix="record"
																title={record.title}
																subtitle={
																	isProjectRecord ? record.subtitle
																	: isPublicationRecord ? record.subtitle
																	: isNewsRecord ? null
																	: isPressRecord ? record.publisher
																	: null
																}
																separator={
																	isProjectRecord ? undefined
																	: isPublicationRecord ? undefined
																	: isNewsRecord ? undefined
																	: isPressRecord ? " →&nbsp;"
																	: undefined
																}
															/>
														</Link>
													</h4>
												</div>
											);
											case "date": return (
												<div class="record-date" data-format={isProjectRecord ? record.date.dateFormat : null}>
													{isProjectRecord && (
														<ComplexDate source={isProjectRecord && record.date} />
													)}
													{["news", "press"].includes(record.type) && (
														<SimpleDate source={(isNewsRecord || isPressRecord || isPublicationRecord) && record.date} />
													)}
													{["publication"].includes(record.type) && (
														<time datetime={record.date}>{record.date.split("-")[0]}</time>
													)}
												</div>
											);
											case "tags": return schemaItem.tags && schemaItem.tags.length !== 0 && (
												<dl class="record-tags" aria-label="Tags">
													{schemaItem.tags.map((schemaTag) => (
														<div class={`record-${schemaTag}`} data-has-value={record[schemaTag] && record[schemaTag].length !== 0 ? "true" : "false"}>
															<dt class="display-none">{
																schemaTag === "types" ? "Types"
																: schemaTag === "collections" ? "Collections"
																: schemaTag === "subjects" ? "Subjects"
																: schemaTag === "locations" ? "Locations"
																: null
															}</dt>
															{record[schemaTag] && record[schemaTag].length !== 0 && record[schemaTag].map((tag) => (
																<dd>{
																	schemaTag === "locations" ? [tag.name?.trim(), LOCALES.find((locale) => locale.value === tag.locale)?.title]?.filter(Boolean)?.join(", ")
																	: tag.name?.trim()
																}</dd>
															)) || (
																<dd aria-hidden="true">∅</dd>
															)}
														</div>
													))}
												</dl>
											);
											case "description": return schemaItem.descriptions && schemaItem.descriptions.length !== 0 && (hasLocalDescription || hasCollectionDescriptions) && (
												<div class="record-description">
													{schemaItem.descriptions.map((schemaDescription) => (
														schemaDescription === "local" && hasLocalDescription ? (
															<p class="record-description-local">{record.description}</p>
														) : schemaDescription === "collections" && hasCollectionDescriptions ? (
															record.collections.map((collection) => (
																<p class="record-description-collection">{collection.description}</p>
															))
														) : null
													))}
												</div>
											);
											case "image": return (isProjectRecord || isPublicationRecord || isNewsRecord || isPressRecord) && record.image && record.image.asset && (
												<div class="record-image">
													<Image
														source={record.image}
														sizes={
															isProjectRecord ? "(min-width: 1281px) 30vw, (max-width: 640px) 100vw, (max-width: 1024px) 50vw, (max-width: 1280px) 40vw"
															: isPublicationRecord ? "(min-width: 1281px) 25vw, (max-width: 640px) 50vw, (max-width: 1024px) 30vw, (max-width: 1280px) 25vw"
															: isNewsRecord ? "(min-width: 769px) 60ch, (max-width: 768px) 100vw"
															: isPressRecord ? "(min-width: 769px) 50ch, (max-width: 768px) 100vw"
															: "100vw"
														}
													/>
												</div>
											);
											case "body": return hasBody && (
												<div class="record-body">
													<PortableText source={record.body} />
												</div>
											);
											case "related": return hasRelated && (
												<div class="record-related">
													<dl class="record-related-projects">
														<dt>Projects covered:</dt>
														{record.relatedProjects.map((project) => (
															<dd><Link href={`/${schemaItem.baseUrls.projectsListingBaseUrl}/${project.slug.current}`}>{project.title}</Link></dd>
														))}
													</dl>
												</div>
											);
											default: return null;
										};
									})}
								</article>
							);
						})}
					</section>
				</>))}
			</section>
		)
	})}
</div>

<style lang="scss" is:global>
	// sass setup
	@use "@styles/mixins";
	@mixin hoverable-record($from-background-color: transparent, $to-background-color: var(--color-6), $before: false) {
		@if $before {
			&::before {
				background: $from-background-color;
				transition: background-color 0.125s;
			}
			@media (any-hover: hover) {
				&:hover::before {
					background: $to-background-color;
				}
			}
		} @else {
			background: $from-background-color;
			transition: background-color 0.125s;
			@media (any-hover: hover) {
				&:hover {
					background: $to-background-color;
				}
			}
		}
	}
	// configuration
	#dataset:not([data-current-view="list"]) #sorts,
	#dataset[data-current-view="cards"] .listing:not([data-default="true"]),
	#dataset[data-current-view="list"][data-current-grouping="title"] .listing:not([data-grouping="title"]),
	#dataset[data-current-view="list"][data-current-grouping="date"] .listing:not([data-grouping="date"]),
	#dataset[data-current-view="list"][data-current-grouping="types"] .listing:not([data-grouping="types"]),
	#dataset[data-current-view="list"][data-current-grouping="collections"] .listing:not([data-grouping="collections"]) {
		display: none;
	}
	#tags[data-current-filter="none"],
	#tags[data-current-filter="types"] > ul:not([data-filter="types"]),
	#tags[data-current-filter="collections"] > ul:not([data-filter="collections"]),
	#tags[data-current-filter="subjects"] > ul:not([data-filter="subjects"]),
	#tags[data-current-filter="locations"] > ul:not([data-filter="locations"]) {
		display: none;
	}
	// controls and sorts
	#controls-outer, #sorts {
		line-height: 1;
	}
	#controls-outer {
		position: sticky;
		top: var(--header-height);
		z-index: 98;
		padding-inline: calc(15% + 1.5rem + 1.5rem);
		margin-inline: -1.5rem;
		background: var(--color-7);
		font-size: var(--font-size-medium);
		@media (min-width: 1536px) {
			padding-inline: calc(20% + 1.5rem + 1.5rem);
		}
		@media (max-width: 1280px) {
			padding-inline-end: 1.5rem;
		}
		@media (max-width: 1024px) {
			padding-inline-start: 1.5rem;
		}
	}
	#controls-inner {
		display: flex;
		flex-wrap: wrap;
		column-gap: 1.5rem;
		row-gap: 1rem;
		padding-block: 1rem;
		border-block-end: 1px solid var(--color-5);
	}
	.control-group-title {
		color: var(--color-2);
	}
	.control-group {
		display: flex;
		column-gap: 0.75rem;
		row-gap: 0.75rem;
		@media (max-width: 512px) {
			flex-direction: column;
			flex-wrap: wrap;
			max-height: calc(2em + 0.75rem + 1px);
		}
	}
	.control {
		position: relative;
		input {
			position: absolute;
			inset: 0;
			opacity: 0;
		}
		input,
		input + label {
			cursor: pointer;
		}
		input + label {
			position: relative;
		}
		input + label::before {
			display: inline-block;
			margin-inline-end: 0.25rem;
			font-family: var(--font-family-mono);
			line-height: 1;
		}
		input:not(:checked) + label::before {
			color: var(--color-3);
		}
		input:checked + label::before {
			color: currentColor;
		}
	}
	#filters,
	#views {
		display: flex;
		align-items: baseline;
		column-gap: 0.75rem;
		row-gap: 0.75rem;
		@media (max-width: 768px) {
			flex-direction: column;
		}
	}
	#filters {
		flex: 1;
		label::before {
			content: "+";
			content: "+" / "";
		}
		input:checked + label::before {
			content: "×";
			content: "×" / "";
		}
		input:checked + label::after {
			content: "";
			position: absolute;
			display: block;
			left: 50%;
			transform: translateX(-50%);
			width: 1em;
			height: 0.5em;
			background: var(--color-7);
			top: calc(100% + 1rem - 0.5em - 1px);
			border-inline-start: 0.5em solid var(--color-7);
			border-inline-end: 0.5em solid var(--color-7);
			border-block-end: 0.5em solid var(--color-6);
			pointer-events: none;
			@media (max-width: 512px) {
				content: none;
			}
		}
	}
	#views {
		min-width: 3.75rem;
		input:checked + label::before {
			content: "✓";
			content: "✓" / "";
		}
	}
	#tags {
		flex-basis: calc(100% + 1.5rem);
		ul {
			display: flex;
			flex-wrap: wrap;
			column-gap: 1.5rem;
			row-gap: 0.75rem;
			padding: 0.75rem;
			background: var(--color-6);
			list-style: none;
		}
		a {
			display: flex;
		}
		a::before {
			content: attr(data-size);
			content: attr(data-size) / "";
			display: inline-block;
			margin-inline-end: 0.5rem;
			color: var(--color-3);
		}
	}
	#sorts {
		position: sticky;
		top: calc(var(--header-height) + (var(--font-size-medium) + 1rem + 1rem + 1px));
		z-index: 97;
		margin-inline: -1.5rem;
		padding-inline: calc(15% + 1.5rem + 1.5rem);
		background: var(--color-7);
		font-size: var(--font-size-medium);
		@media (min-width: 1536px) {
			padding-inline: calc(20% + 1.5rem + 1.5rem);
		}
		@media (max-width: 1280px) {
			padding-inline-end: 1.5rem;
		}
		@media (max-width: 1024px) {
			padding-inline-start: 1.5rem;
		}
	}
	#sorts-inner {
		display: grid;
		grid-template-columns: var(--list-columns-gt-1024px);
		border-block-end: 1px solid var(--color-5);
		@media (max-width: 1024px) {
			grid-template-columns: var(--list-columns-lte-1024px);
		}
	}
	.sort {
		position: relative;
		padding-block: 1rem;
		padding-inline: 0.75rem;
		background: transparent;
		transition: background-color 0.125s;
		input:checked + label::before {
			content: "↓";
			content: "↓" / "";
		}
		@media (any-hover: hover) {
			&:hover {
				background: var(--color-6);
			}
		}
	}
	// listings
	.record-group {
		display: grid;
		grid-template-columns: var(--grouping-columns-lt-1536px);
		column-gap: 1.5rem;
		&[data-size="0"] {
			display: none;
		}
		* {
			min-width: 0;
			min-height: 0;
		}
	}
	.record-group-title {
		grid-column: 1/2;
		position: sticky;
		top: var(--header-height);
		z-index: 99;
		height: fit-content;
		width: fit-content;
		padding-block: 0.75rem;
		color: var(--color-2);
		text-wrap: balance;
	}
	.record {
		grid-column: 2/3;
	}
	@media (min-width: 1536px) {
		.record-group {
			grid-template-columns: var(--grouping-columns-gte-1536px);
		}
	}
	@media (max-width: 1280px) {
		.record-group {
			grid-template-columns: var(--grouping-columns-lte-1280px);
		}
	}
	@media (max-width: 1024px) {
		.record-group {
			grid-template-columns: unset;
		}
		.record-group-title {
			grid-column: unset;
			position: revert;
			top: revert;
			z-index: revert;
		}
		.record {
			grid-column: unset;
		}
	}
	#dataset[data-current-view="cards"] .listing {
		& {
			margin-block: 0.75rem;
		}
		.record {
			position: relative;
		}
		.record-title {
			text-wrap: balance;
			// @include mixins.ellipsis-multiline($lines: 3);
		}
		.record-title a::after {
			content: "";
			position: absolute;
			inset: 0;
			z-index: 1;
		}
		.record-title-baseline {
			font-weight: var(--font-weight-bold);
		}
		.record-date {
			font-size: var(--font-size-small);
			color: var(--color-2);
		}
		.record-date[data-format="yearOnly"] {
			display: none;
		}
		.record-description {
			font-size: var(--font-size-small);
			color: var(--color-2);
		}
		.record-description-local,
		.record-description-collection {
			@include mixins.ellipsis-multiline($lines: 3);
		}
		.record-tags {
			display: flex;
			flex-wrap: wrap;
			column-gap: 0.5rem;
			row-gap: 0.5rem;
			font-size: var(--font-size-small);
			color: var(--color-1);
			[data-has-value="false"] {
				display: none;
			}
		}
		.record-types,
		.record-locations {
			display: inline-flex;
			flex-wrap: wrap;
			column-gap: 0.5rem;
			row-gap: 0.5rem;
		}
		.record-tags dd {
			@include mixins.tag($hover: false, $border-color: var(--color-5));
			background: var(--color-7);
		}
		.record-tags dd ~ dd {
			// display: none;
		}
		.record-collections {
			display: none;
		}
		.record-image img {
			display: block;
			height: 100%;
			width: 100%;
			object-fit: cover;
			aspect-ratio: 16/9;
		}
		@media (min-width: 641px) {
			.record {
				display: grid;
				grid-template-columns: 1fr 1fr;
				grid-template-rows: auto auto 1fr auto;
				column-gap: 1rem;
				row-gap: var(--_inner-gap);
				--_inner-gap: 0.75rem;
			}
			.record-image {
				grid-column: 1/2;
				grid-row: 1/5;
			}
			.record-image picture {
				height: 100%;
			}
			.record-title,
			.record-tags,
			.record-date,
			.record-description {
				grid-column: 2/3;
			}
			.record-title {
				grid-row: 1/2;
			}
			.record-date {
				grid-row: 2/3;
				margin-block-start: -0.15em;
			}
			.record-date[data-format="yearOnly"] ~ .record-description {
				margin-block-start: calc(var(--_inner-gap) * -1);
				min-height: calc(100% + var(--_inner-gap));
			}
			.record-description {
				grid-row: 3/4;
				height: 0;
				min-height: 100%;
				overflow: hidden;
				overflow: clip;
				-webkit-mask: linear-gradient(to bottom, black, black calc(100% - 1.25rem), transparent);
				mask: linear-gradient(to bottom, black, black calc(100% - 1.25rem), transparent);
			}
			.record-description-local + .record-description-collection {
				margin-block-start: var(--_inner-gap);
			}
			.record-tags {
				grid-row: 4/5;
				margin-block-end: var(--_inner-gap);
			}
		}
		@media (min-width: 1025px) {
			.record {
				padding: 0.75rem;
				@include hoverable-record();
			}
		}
		@media (max-width: 1024px) {
			.record {
				padding-block: 0.75rem;
				--_inner-gap: 0.5rem;
			}
		}
		@media (max-width: 640px) {
			.record {
				display: flex;
				flex-direction: column;
				row-gap: 0.25rem;
			}
			.record-image {
				order: 1;
				margin-block-end: 0.15em;
			}
			.record-date {
				order: 2;
			}
			.record-title {
				order: 3;
				max-width: 50ch;
			}
			.record-description {
				order: 4;
			}
			.record-description:has(.record-description-collection:only-child) {
				display: none;
			}
			.record-description-collection { 
				display: none;
			}
			.record-tags {
				position: absolute;
				left: var(--_inset);
				right: var(--_inset);
				bottom: calc(100% - 0.75rem - ((100vw - 1.5rem - 1.5rem) * 0.5625) + var(--_inset));
				bottom: calc(100% - 0.75rem - ((100dvw - 1.5rem - 1.5rem) * 0.5625) + var(--_inset));
				--_inset: 0.5rem;
				// order: 5;
			}
		}
		@media (max-width: 384px) {
			.record-tags,
			.record-types,
			.record-locations {
				flex-wrap: nowrap;
			}
			.record-tags dd {
				@include mixins.ellipsis();
			}
		}
	}
	#dataset[data-current-view="list"] .listing {
		@media (min-width: 1025px) {
			& {
				margin-block-end: 1.5rem;
			}
			.record {
				position: relative;
				display: grid;
				grid-template-columns: var(--list-columns-gt-1024px);
				border-block-end: 1px solid var(--color-6);
				@include hoverable-record();
				// &::after {
				// 	position: absolute;
				// 	top: 0;
				// 	right: 0;
				// 	width: 1ch;
				// 	height: 1.3rem;
				// 	margin: 0.75rem;
				// 	color: var(--color-4);
				// 	font-size: var(--font-size-medium);
				// 	font-family: var(--font-family-mono);
				// 	line-height: 1.6;
				// }
				@media (any-hover: hover) {
					// &:hover:not(:has(a:hover))::after {
					// 	color: var(--color-3);
					// }
				}
			}
			.record[data-expanded="true"] {
				margin-block-start: -1px;
				background: var(--color-6);
				border-block-end: 1px solid var(--color-5);
				border-block-start: 1px solid var(--color-5);
				// &::after {
				// 	content: "×";
				// 	content: "×" / "";
				// 	color: var(--color-3);
				// }
			}
			.record:not([data-expanded="true"]) {
				.record-description,
				.record-image {
					display: none;
				}
				// &::after {
				// 	content: "+";
				// 	content: "+" / "";
				// }
			}
			.record-title,
			.record-date,
			.record-types,
			.record-collections,
			.record-image,
			.record-description, {
				padding: 0.75rem;
			}
			.record-date,
			.record-types,
			.record-collections,
			.record-description {
				color: var(--color-2);
			}
			.record-title {
				position: relative;
				grid-column: 1/2;
			}
			.record-title a {
				@include mixins.hover-text();
			}
			.record-title a::after {
				content: "";
				display: block;
				position: absolute;
				inset: 0;
				bottom: -1px;
			}
			.record-title-baseline {
				font-weight: var(--font-weight-bold);
			}
			.record-date {
				grid-column: 2/3;
				.date-baseline {
					display: none;
				}
			}
			.record-tags {
				display: contents;
			}
			.record-types {
				grid-column: 3/4;
			}
			.record-collections {
				grid-column: 4/5;
			}
			.record-locations {
				display: none;
			}
			.record-tags dd {
				display: inline;
				&:not(:last-of-type)::after {
					content: ", ";
				}
			}
			.record-image,
			.record-description {
				padding-block-start: 0;
			}
			.record-image {
				grid-column: 1/2;
				grid-row: 2/3;
			}
			.record-description {
				grid-column: 2/5;
				grid-row: 2/3;
				font-size: var(--font-size-small);
			}
			.record-description-local + .record-description-collection {
				margin-block-start: 0.5rem;
			}
		}
		// @media (max-width: 1024px) {
		// 	& {
		// 		margin-block-end: 0.75rem;
		// 	}
		// 	.record {
		// 		padding-block: 0.75rem;
		// 		margin-inline-start: 1.5rem;
		// 	}
		// 	.record::before {
		// 		content: "•";
		// 		content: "•" / "";
		// 		display: inline-block;
		// 		margin-inline-start: -1.5rem;
		// 		margin-block-start: 0.1ch;
		// 		padding-inline-end: calc(1.5rem - 1ch);
		// 		font-family: var(--font-family-mono);
		// 		line-height: 1;
		// 		float: left;
		// 		color: var(--color-3);
		// 	}
		// 	.record-title {
		// 		display: inline-block;
		// 		width: 100%;
		// 		margin-block-end: 0.25rem;
		// 		// text-wrap: balance;
		// 	}
		// 	.record-title-baseline {
		// 		font-weight: var(--font-weight-bold);
		// 	}
		// 	.record-date,
		// 	.record-date * {
		// 		display: inline;
		// 	}
		// 	.record-date::after {
		// 		content: ", ";
		// 	}
		// 	.record-types[data-has-value="true"] + .record-collections[data-has-value="true"]::before {
		// 		content: ", ";
		// 	}
		// 	.record-tags > [data-has-value="false"] {
		// 		display: none;
		// 	}
		// 	.record-tags,
		// 	.record-types,
		// 	.record-types dd,
		// 	.record-collections,
		// 	.record-collections dd {
		// 		display: inline;
		// 	}
		// 	.record-types > dd:not(:last-of-type)::after,
		// 	.record-collections > dd:not(:last-of-type)::after {
		// 		content: ", ";
		// 	}
		// 	.record-subjects,
		// 	.record-locations {
		// 		display: none;
		// 	}
		// 	.record-description {
		// 		display: none;
		// 	}
		// 	.record-image {
		// 		display: none;
		// 	}
		// 	.record-date,
		// 	.record-tags {
		// 		color: var(--color-2);
		// 		font-size: var(--font-size-medium);
		// 	}
		// }
	}
	#dataset[data-current-view="headlines"] .listing {
		.record-group-title {
			display: none;
		}
		.record {
			display: flex;
			flex-flow: column;
			row-gap: 0.75rem;
		}
		.record[data-type="press"] {
			position: relative;
			.record-title a::after {
				content: "";
				position: absolute;
				inset: 0;
			}
			.record-description {
				@include mixins.ellipsis-multiline($lines: 3);
			}
		}
		.record-date {
			order: 1;
			font-size: var(--font-size-medium);
			color: var(--color-2);
		}
		.record-image {
			order: 2;
		}
		.record-title {
			order: 3;
			font-size: var(--font-size-x-large);
			letter-spacing: var(--letter-spacing-small);
			text-wrap: balance;
		}
		.record-title-baseline {
			font-weight: var(--font-weight-bold);
		}
		.record-subtitle {
			display: inline-block;
		}
		.record-description {
			order: 4;
			font-size: var(--font-size-medium);
			color: var(--color-2);
		}
		.record-body {
			order: 5;
			font-size: var(--font-size-medium);
			color: var(--color-2);
		}
		.record-related {
			order: 6;
			font-size: var(--font-size-medium);
		}
		.record-related a {
			position: relative;
			@include mixins.link();
			@include mixins.hover-text();
		}
		.record-related-projects dt {
			display: inline
		}
		.record-related-projects dd {
			@include mixins.comma-separated-list();
		}
		@media (min-width: 769px) {
			& {
				margin-block: 1.5rem;
				@include mixins.polka-dot-background();
			}
			.record {
				padding: 1.5rem;
				margin: 1.5rem;
			}
			.record[data-type="news"] {
				width: 100%;
				max-width: 60ch;
				background: var(--color-7);
				scroll-margin-block-start: calc(var(--header-height) + 1.5rem);
			}
			.record[data-type="press"] {
				width: fit-content;
				max-width: 50ch;
				@include hoverable-record($from-background-color: var(--color-7));
			}
			.record:nth-of-type(even) {
				margin-inline-start: auto;
			}
			.record:nth-of-type(3n + 1) {
				margin-inline: auto;
			}
		}
		@media (max-width: 768px) {
			& {
				margin-block-end: 1.5rem;
			}
			.record {
				background: var(--color-7);
				padding-block: 1.5rem;
				border-block-end: 1px solid var(--color-5);
			}
			.record[data-type="news"] {
				scroll-margin-block-start: var(--header-height);
			}
			.record-title a::after {
				top: 1.5rem;
				bottom: 1.5rem;
			}
		}
	}
	#dataset[data-current-view="covers"] .listing {
		& {
			margin-block: 1.5rem;
		}
		.record-group-title {
			display: none;
		}
		.record-group {
			row-gap: 1.5rem;
		}
		.record {
			position: relative;
			display: flex;
			flex-direction: column;
			row-gap: 0.25rem;
		}
		.record:nth-of-type(3n - 2) {
			grid-column: 2/3;
		}
		.record:nth-of-type(3n - 1) {
			grid-column: 3/4;
		}
		.record:nth-of-type(3n) {
			grid-column: 4/5;
		}
		.record-image {
			order: 1;
			margin-block-end: 0.15em;
		}
		.record-image img {
			display: block;
			height: 100%;
			width: 100%;
			object-fit: cover;
			aspect-ratio: 2.1/3;
		}
		.record-date {
			order: 2;
			font-size: var(--font-size-small);
			color: var(--color-2);
		}
		.record-title {
			order: 3;
			text-wrap: balance;
		}
		.record-title-baseline {
			font-weight: var(--font-weight-bold);
		}
		.record-title a::after {
			content: "";
			position: absolute;
			inset: 0;
		}
		.record-tags {
			order: 4;
			font-size: var(--font-size-small);
			color: var(--color-2);
			[data-has-value="false"] {
				display: none;
			}
		}
		.record-types,
		.record-collections {
			display: contents;
		}
		.record-tags dd {
			display: inline;
		}
		.record-tags dd::after {
			content: ", ";
		}
		@media (max-width: 1024px) {
			.record:nth-of-type(3n - 2) {
				grid-column: 1/2;
			}
			.record:nth-of-type(3n - 1) {
				grid-column: 2/3;
			}
			.record:nth-of-type(3n) {
				grid-column: 3/4;
			}
		}
		@media (max-width: 640px) {
			.record:nth-of-type(2n - 1) {
				grid-column: 1/2;
			}
			.record:nth-of-type(2n) {
				grid-column: 2/3;
			}
		}
	}
</style>

<script>
	const dataset = document.querySelector("#dataset");
	const viewInputs = document.querySelectorAll(`input[name="view-as"]`);
	const sortInputs = document.querySelectorAll(`input[name="sort-by"]`);
	viewInputs?.forEach((input) => {
		return input.addEventListener("change", handleViewChange);
	});
	sortInputs?.forEach((input) => {
		return input.addEventListener("change", handleSortChange);
	});
	function handleViewChange(event: Event) {
		const selectedView = (event.target as HTMLInputElement).value;
		dataset.setAttribute("data-current-view", selectedView);
		return;
	};
	function handleSortChange(event: Event) {
		const selectedSort = (event.target as HTMLInputElement).value;
		dataset.setAttribute("data-current-grouping", selectedSort);
		return;
	};

	const filterInputs = document.querySelectorAll(`input[name="filter-by"]`);
	filterInputs?.forEach((input) => {
		return input.addEventListener("change", handleFilteringChange);
	});
	function handleFilteringChange(event: Event) {
		const selectedFilter = (event.target as HTMLInputElement).value;
		const tagsList = document.querySelector("#tags");
		const otherFilters = document.querySelectorAll(`input[name="filter-by"]:not([value="${selectedFilter}"])`);
		if ((event.target as HTMLInputElement).checked === true) {
			tagsList.setAttribute("data-current-filter", selectedFilter);
		} else {
			tagsList.setAttribute("data-current-filter", "none");
		};
		otherFilters.forEach((filter: HTMLInputElement) => filter.checked = false );
		return;
	};

	var upcomingRecords = []
	var ongoingRecords = [];
	const upcomingRecordsGroup = document.querySelector("#date-group-upcoming");
	const ongoingRecordsGroup = document.querySelector("#date-group-ongoing");
	const recordsWithStartDates = document.querySelectorAll(`.listing[data-grouping="date"] .record[data-start-date]`);
	recordsWithStartDates.forEach((record) => {
		const startDateString = record.getAttribute("data-start-date");
		const endDateString = record.getAttribute("data-end-date");
		const startDate = new Date(startDateString);
		const endDate = endDateString && new Date(endDateString) || null;
		const now = new Date();
		if (startDate > now) {
			updateRecordGroupSize(record, -1);
			upcomingRecords.push(record);
			record.remove();
			return;
		};
		if (endDate && startDate < now && endDate > now) {
			updateRecordGroupSize(record, -1);
			ongoingRecords.push(record);
			record.remove();
			return;
		};
	});
	upcomingRecords.forEach((record) => {
		upcomingRecordsGroup.appendChild(record);
		updateRecordGroupSize(record, 1);
		return;
	});
	ongoingRecords.forEach((record) => {
		ongoingRecordsGroup.appendChild(record);
		updateRecordGroupSize(record, 1);
		return;
	});
	function updateRecordGroupSize (record: Element, modifier: 1 | -1) {
		if (!record || !modifier) { return; };
		const group = record.closest(".record-group[data-size]");
		if (!group) { return; };
		return group.setAttribute("data-size", (parseFloat(group.getAttribute("data-size")) + modifier)?.toString());
	};

	const records = document.querySelectorAll(".record");
	records.forEach((record) => {
		record.addEventListener("click", handleRecordClick);
	});
	function handleRecordClick(event: Event) {
		if ((event.target as HTMLElement).closest("a") && !(event.target as HTMLElement).closest(`.record[data-type="news"]`)) { return; };
		const closestRecord = (event.target as HTMLElement).closest(".record");
		if (closestRecord.getAttribute("data-expanded") === "false") {
			closestRecord.setAttribute("data-expanded", "true");
		} else {
			if ((event.target as HTMLElement).closest("p, img, span, dd, time")) { return; };
			closestRecord.setAttribute("data-expanded", "false");
		};
		return;
	};
</script>