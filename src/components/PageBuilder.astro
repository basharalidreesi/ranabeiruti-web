---
import Column from "@components/Column.astro";
import ComplexDate from "@components/ComplexDate.astro";
import Row from "@components/Row.astro";
import Figure from "@components/Figure.astro";
import Link from "@components/Link.astro";
import PortableText from "@components/PortableText.astro";
import { LOCALES } from "@lib/locales";
import type { ProjectProps } from "@lib/types";

export type Props = {
	source: [];
	document: ProjectProps;
	baseUrl?: string;
};

const {
	source,
	document,
	baseUrl,
} = Astro.props;
---

{source ? source?.map((row: { columns: any[]; doesBreakout: boolean; }, index: number) => {
	if (row.columns.filter((column) => {
		switch (column._type) {
			case "column": return (!column.content || column.content?.length === 0) ? true : false;
			case "title": return !document.title ? true : false;
			case "image_": return (!document.image || !document.image?.asset) ? true : false;
			// case "description": return (!document.description || document.description?.length === 0) ? true : false;
			// case "credits": return (!document.credits || document.credits?.length === 0) ? true : false;
			// case "relatedContent": return true;
			default: return true;
		};
	})?.length === row.columns.length) {
		return null;
	};
	return (
		<Row index={index + 1} doesBreakout={row.doesBreakout}>
			{row.columns?.map((column, index) => {
				const ratio = Math.max(column.ratio, 1) || 1;
				const verticalAlignment = column.verticalAlignment;
				switch (column._type) {
					case "column": {
						if (column.content && column.content.length !== 0) {
							return (
								<Column ratio={ratio} verticalAlignment={verticalAlignment} index={index + 1}>
									<PortableText source={column.content} />
								</Column>
							);
						};
						return (
							<Column ratio={ratio} verticalAlignment={verticalAlignment} index={index + 1} />
						);
					};
					case "title": return (
						<Column ratio={ratio} verticalAlignment={verticalAlignment} index={index + 1}>
							<div id="document-title">
								<h1 id="document-title-baseline">{document.title?.trim()}</h1>
								{document.subtitle && (
									<p id="document-subtitle">{document.subtitle?.trim()}</p>
								)}
							</div>
							<div id="document-date">
								<ComplexDate source={document.date} />
							</div>
							<div id="document-tags">
								<ul>
									{[...(document.types || []), ...(document.collections || []), ...(document.subjects || []), ...(document.locations || [])]?.filter(Boolean)?.map((tag) => (
										<li>
											<Link class="tag" href={`/${baseUrl}/?${tag.type}=${tag.type === "location" ? tag.locale?.toLowerCase() : tag.slug.current}`}>
												{tag.type === "location" ? `${tag.name?.trim()}, ${LOCALES.find((locale) => locale.value === tag.locale)?.title}` : tag.name?.trim()}
											</Link>
										</li>
									))}
								</ul>
							</div>
						</Column>
					);
					case "image_": return (
						<Column ratio={ratio} verticalAlignment={verticalAlignment} index={index + 1}>
							<Figure source={document.image} />
						</Column>
					);
					// case "description": return (
					// 	<Column ratio={ratio} verticalAlignment={verticalAlignment} index={index + 1}>
					// 		<PortableText source={document.description} small={true} muted={true} />
					// 	</Column>
					// );
					// case "credits": return (
					// 	<Column ratio={ratio} verticalAlignment={verticalAlignment} index={index + 1}>
					// 		<PortableText source={document.credits} small={true} muted={true} />
					// 	</Column>
					// );
					// case "relatedContent": return (
					// 	<Column ratio={ratio} verticalAlignment={verticalAlignment} index={index + 1}>
					// 		<p>
					// 			{JSON.stringify(column.byProfiles)}
					// 		</p>
					// 		<p>
					// 			{JSON.stringify(column.byTypes)}
					// 		</p>
					// 		<p>
					// 			{JSON.stringify(column.bySubjects)}
					// 		</p>
					// 		<p>
					// 			{JSON.stringify(column.byClients)}
					// 		</p>
					// 		<p>
					// 			{JSON.stringify(column.byLocations)}
					// 		</p>
					// 		<p>
					// 			{JSON.stringify(column.byYear)}
					// 		</p>
					// 	</Column>
					// );
					default: return null;
				};
			})}
		</Row>
	);
}) : null}

<style lang="scss">
	#document-title-baseline {
		font-weight: var(--font-weight-bold);
	}
	#document-subtitle {
		margin-block-start: 0.75rem;
	}
	#document-date {
		margin-block-start: 1rem;
		font-size: var(--font-size-small);
	}
	#document-tags {
		margin-block-start: 1rem;
		font-size: var(--font-size-small);
	}
	#document-tags ul {
		list-style: none;
		display: flex;
		flex-wrap: wrap;
		column-gap: 0.5rem;
		row-gap: 0.5rem;
		margin-inline-start: -0.5625rem;
	}
	#document-tags .tag {
		display: block;
		padding-block: 0.1875rem;
		padding-inline: 0.5625rem;
		border-radius: 9999px;
		background: var(--color-5);
		transition: background-color 0.125s;
		@media (any-hover: hover) {
			&:hover {
				background: var(--color-6);
			}
		}
	}
</style>