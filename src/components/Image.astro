---
import sanityClient from "@root/sanity.js";
import imageUrlBuilder from "@sanity/image-url";
import type { SanityImageMetadataObject } from "@lib/types";
import type { SanityImageObject, SanityImageSource } from "@sanity/image-url/lib/types/types";

const imageBuilder = imageUrlBuilder(sanityClient);

function urlFor(source: SanityImageSource, width?: number) {
	try {
		return width ? imageBuilder.image(source)?.width(width)?.quality(100)?.auto("format")?.url() : imageBuilder.image(source)?.quality(100)?.auto("format")?.url();
	} catch(error) {
		console.error(error);
	}
};

type Props = {
	source: SanityImageObject & SanityImageMetadataObject;
	class?: string;
	sizes?: string;
	style?: {};
};

const {
	source,
	class: className,
	sizes = "100vw",
	style = {},
	...rest
} = Astro.props;

const sourceSets = {
	500: {
		source: urlFor(source, 500),
		width: 500,
		descriptor: "500w",
	},
	800: {
		source: urlFor(source, 800),
		width: 800,
		descriptor: "800w",
	},
	1100: {
		source: urlFor(source, 1100),
		width: 1100,
		descriptor: "1100w",
	},
	1500: {
		source: urlFor(source, 1500),
		width: 1500,
		descriptor: "1500w",
	},
	2000: {
		source: urlFor(source, 2000),
		width: 2000,
		descriptor: "2000w",
	},
	2500: {
		source: urlFor(source, 2500),
		width: 2500,
		descriptor: "2500w",
	},
};

const srcset = [
	`${sourceSets[500].source} ${sourceSets[500].descriptor}`,
	`${sourceSets[800].source} ${sourceSets[800].descriptor}`,
	`${sourceSets[1100].source} ${sourceSets[1100].descriptor}`,
	`${sourceSets[1500].source} ${sourceSets[1500].descriptor}`,
	`${sourceSets[2000].source} ${sourceSets[2000].descriptor}`,
	`${sourceSets[2500].source} ${sourceSets[2500].descriptor}`,
];
---

{source && source.asset && (
	<picture class={className} style={{
		backgroundImage: source.metadata && source.metadata.isOpaque && source.metadata.lqip && `url(${source.metadata.lqip})`,
		"--hotspot-x": source.hotspot && (source.hotspot.x) || 0.5,
		"--hotspot-y": source.hotspot && (source.hotspot.y) || 0.5,
		...style,
	}} {...rest}>
		<img
			srcset={srcset.join(", ")}
			sizes={sizes}
			width={source.metadata?.dimensions?.width}
			height={source.metadata?.dimensions?.height}
			loading="lazy"
			src={urlFor(source, sourceSets[2500].width)}
			alt=""
		/>
	</picture>
)}

<style lang="scss">
	picture {
		display: block;
		background-size: cover;
		background-repeat: no-repeat;
		background-position: calc(var(--hotspot-x) * 100%) calc(var(--hotspot-y) * 100%);
	}
	img {
		display: block;
		width: 100%;
		height: auto;
		object-fit: cover;
		object-position: calc(var(--hotspot-x) * 100%) calc(var(--hotspot-y) * 100%);
		font-style: italic;
	}
</style>