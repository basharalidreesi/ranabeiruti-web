---
import sanityClient from "@root/sanity.js";
import imageUrlBuilder from "@sanity/image-url";
import type { SanityImageMetadataObject } from "@lib/types";
import type { ImageFormat, SanityImageObject, SanityImageSource } from "@sanity/image-url/lib/types/types";

const imageBuilder = imageUrlBuilder(sanityClient);

function urlFor(source: SanityImageSource, format: ImageFormat) {
	return !["gif"].includes(format) ? imageBuilder.image(source)?.format(format)?.url() : imageBuilder.image(source)?.url();
};

type Props = {
	source: SanityImageObject & SanityImageMetadataObject;
	class?: string;
	style?: {};
};

const {
	source,
	class: className,
	style = {},
	...rest
} = Astro.props;
---

{source && source.asset && (
	<picture class={className} style={{
		backgroundImage: source.metadata && source.metadata.isOpaque && source.metadata.lqip && `url(${source.metadata.lqip})`,
		"--hotspot-x": source.hotspot && (source.hotspot.x) || 0.5,
		"--hotspot-y": source.hotspot && (source.hotspot.y) || 0.5,
		...style,
	}} {...rest}>
		{!["gif"].includes(source.metadata?.extension) && (
			<source srcset={urlFor(source, "webp")} type="image/webp" />
		)}
		<img src={urlFor(source, source.metadata?.extension)} width={source.metadata?.dimensions?.width} height={source.metadata?.dimensions?.height} alt="" loading="lazy" />
	</picture>
)}

<style lang="scss">
	picture {
		display: block;
		background-size: cover;
		background-repeat: no-repeat;
		background-position: calc(var(--hotspot-x) * 100%) calc(var(--hotspot-y) * 100%);
	}
	img {
		display: block;
		width: 100%;
		height: auto;
		object-fit: cover;
		object-position: calc(var(--hotspot-x) * 100%) calc(var(--hotspot-y) * 100%);
		font-style: italic;
	}
</style>