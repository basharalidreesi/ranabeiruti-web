---
const {
	source,
	length = "long",
	format = null,
	...rest
} = Astro.props;

function renderComplexDate(complexDate: { startDate: string; dateFormat: string; endDate: string; hasDuration: boolean; isOngoing: boolean; }) {
	if (!complexDate || !complexDate?.startDate || !complexDate?.dateFormat) { return null; };
	const startDate = complexDate.startDate;
	const endDate = complexDate.endDate;
	const hasDuration = complexDate.hasDuration;
	const isOngoing = complexDate.isOngoing;
	const dateFormat = format || complexDate.dateFormat;
	const getDateComponents = (isoDate: string | number | Date) => {
		const date = new Date(isoDate);
		return {
			day: date.getDate(),
			month: date.getMonth(),
			year: date.getFullYear(),
		};
	};
	const formatMonth = (monthIndex: number) => {
		const longMonthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
		const shortMonthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"];
		return length === "short" ? shortMonthNames[monthIndex] : longMonthNames[monthIndex];
	};
	const startComponents = getDateComponents(startDate);
	const endComponents = endDate ? getDateComponents(endDate) : null;
	switch (dateFormat) {
		case "fullDate":
			if (hasDuration && endDate && !isOngoing) {
				if (
					startComponents.year === endComponents.year
					&& startComponents.month === endComponents.month
					&& startComponents.day === endComponents.day
				) {
					return `${startComponents.day} ${formatMonth(startComponents.month)} ${startComponents.year}`;
				};
				if (
					startComponents.year === endComponents.year
					&& startComponents.month === endComponents.month
					&& startComponents.day !== endComponents.day
				) {
					return `${startComponents.day} – ${endComponents.day} ${formatMonth(startComponents.month)} ${startComponents.year}`;
				};
				if (
					startComponents.year === endComponents.year
					&& startComponents.month !== endComponents.month
					&& startComponents.day !== endComponents.day
				) {
					return `${startComponents.day} ${formatMonth(startComponents.month)} – ${endComponents.day} ${formatMonth(endComponents.month)} ${startComponents.year}`;
				};
				return `${startComponents.day} ${formatMonth(startComponents.month)} ${startComponents.year} – ${endComponents.day} ${formatMonth(endComponents.month)} ${endComponents.year}`;
			};
			if (hasDuration && isOngoing) {
				return `${startComponents.day} ${formatMonth(startComponents.month)} ${startComponents.year} – Present`;
			};
			return `${startComponents.day} ${formatMonth(startComponents.month)} ${startComponents.year}`;
		case "yearWithMonth":
			if (hasDuration && endDate && !isOngoing) {
				if (startComponents.year === endComponents.year && startComponents.month === endComponents.month) {
					return `${formatMonth(startComponents.month)} ${startComponents.year}`;
				};
				if (startComponents.year === endComponents.year) {
					return `${formatMonth(startComponents.month)} – ${formatMonth(endComponents.month)} ${startComponents.year}`;
				};
				return `${formatMonth(startComponents.month)} ${startComponents.year} – ${formatMonth(endComponents.month)} ${endComponents.year}`;
			};
			if (hasDuration && isOngoing) {
				return `${formatMonth(startComponents.month)} ${startComponents.year} – Present`;
			};
			return `${formatMonth(startComponents.month)} ${startComponents.year}`;
		case "yearOnly":
			if (hasDuration && endDate && !isOngoing) {
				if (startComponents.year === endComponents.year) {
					return `${startComponents.year}`;
				};
				return `${startComponents.year} – ${endComponents.year}`;
			};
			if (hasDuration && isOngoing) {
				return `${startComponents.year} – Present`;
			};
			return `${startComponents.year}`;
		default:
			return null;
	};
};
---

<time datetime={source && source.startDate && source.dateFormat ? (
	source.dateFormat === "yearWithMonth" ? source.startDate.split("-").splice(0, -1).join("-")
	: source.dateFormat === "yearOnly" ? source.startDate.split("-")[0]
	: source.startDate
) : null} {...rest}>
		{renderComplexDate(source)}
</time>
