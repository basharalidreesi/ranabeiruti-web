---
import Image from "@components/Image.astro";
import PortableText from "@components/PortableText.astro";
import type { SanityImageMetadataObject } from "@lib/types.astro";
import type { SanityImageObject } from "@sanity/image-url/lib/types/types";
import type { TypedObject } from "astro-portabletext/types";
import type { VerticalAlignments } from "./Column.astro";

type CaptionPlacements = "left" | "top" | "right" | "bottom";

type Props = {
	source: SanityImageObject & SanityImageMetadataObject & {
		caption: TypedObject[];
		captionPlacement: CaptionPlacements;
		captionVerticalAlignment: VerticalAlignments;
		imageRatio: number;
		captionRatio: number;
	};
};

const { source } = Astro.props;
---

<figure data-caption-placement={source.captionPlacement || "bottom"}>
	<Image source={source} style={{
		flex: Math.max(source.imageRatio, 1) || 1,
	}} />
	{source.caption && source.caption?.length !== 0
		? (
			<figcaption style={{
				flex: Math.max(source.captionRatio, 1) || 1,
				alignSelf: {
						"top": "flex-start",
						"middle": "center",
						"bottom": "flex-end",
				}[source.captionVerticalAlignment] || null,
			}}>
				<PortableText source={source.caption} />
			</figcaption>
		)
		: null
	}
</figure>

<style lang="scss">
	figure {
		display: flex;
		figcaption {
			font-size: var(--font-size-small);
			color: var(--color-2)
		}
	}
	figure:where([data-caption-placement="left"]) {
		flex-flow: row-reverse nowrap;
		gap: 0.75rem;
	}
	figure:where([data-caption-placement="top"]) {
		flex-flow: column-reverse nowrap;
		gap: calc(0.5rem + 0.15em);
	}
	figure:where([data-caption-placement="right"]) {
		flex-flow: row nowrap;
		gap: 0.75rem;
	}
	figure:where([data-caption-placement="bottom"]) {
		flex-flow: column nowrap;
		gap: calc(0.5rem + 0.15em);
	}
	@media (max-width: 768px) {
		figure {
			flex-flow: column nowrap;
			gap: calc(0.5rem + 0.15em);
		}
	}
</style>