---
import PageBuilder, { type PageBuilderProps } from "@components/PageCmps/PageBuilder.astro";
import RichText from "@components/RichText.astro";
import type { ProjectProps } from "@projects/[slug].astro";
import type { PublicationProps } from "@publications/[slug].astro";
import RecordTitle from "./RecordTitle.astro";
import RecordImage from "./RecordImage.astro";
import type { HomepageProps } from "@root/pages/index.astro";
import TitleAndSubtitle from "./TitleAndSubtitle.astro";

export type PageProps = {
	body: PageBuilderProps[];
	doesIncludeCollections: boolean;
	doesIncludeCredits: boolean;
	doesIncludeDescription: boolean;
	doesIncludeRelatedProjects: boolean;
	doesIncludeRelatedPublications: boolean;
};

export type Props = {
	source: ProjectProps | PublicationProps | HomepageProps;
};

const {
	source,
} = Astro.props;

const hasBody = source && source.page && source.page.body && source.page.body.length !== 0;
const hasCredits = source && (source.type === "project" || source.type === "publication") && source.page && source.page.doesIncludeCredits && source.credits && source.credits.length !== 0;
const hasRelatedProjects = source && (source.type === "project" || source.type === "publication") && source.page && source.page.doesIncludeRelatedProjects && source.relatedProjects && source.relatedProjects.length !== 0;
const hasRelatedPublications = source && (source.type === "project" || source.type === "publication") && source.page && source.page.doesIncludeRelatedPublications && source.relatedPublications && source.relatedPublications.length !== 0;
const hasRelated = hasRelatedProjects || hasRelatedPublications;
const relatedRecords = [...(hasRelatedProjects && source.relatedProjects || []), ...(hasRelatedPublications && source.relatedPublications || [])]?.filter(Boolean);
---

<div class="page">
	{hasBody && (
		<section class="page-body">
			<h2 class="display-none">Body</h2>
			<!-- <div class="page-banner" hidden="true">
				<TitleAndSubtitle title={source.title} subtitle={(source.type === "project" || source.type === "publication") && source.subtitle} />
			</div> -->
			<PageBuilder source={hasBody && source.page.body} />
		</section>
	)}
	{(hasCredits || hasRelated) && (
		<footer class="page-footer">
			{hasCredits && (
				<section class="page-credits" aria-label="Credits">
					<h2 class="display-none">Credits</h2>
					<RichText source={source.credits} />
				</section>
			)}
			{hasRelated && (
				<section class="page-related">
					<div class="page-related-headers">
						<div class="page-related-marker">
							<h2>Related</h2>
						</div>
						{relatedRecords.length > 1 && (
							<div class="page-related-previous">
								<button name="seek-to" value="-1" title="Previous">Previous</button>
								<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
									<title>Previous</title>
									<line x1="24" y1="12" x2="0" y2="12"></line>
									<polyline points="8.49,3.51 0,12 8.49,20.49"></polyline>
								</svg>
							</div>
							<div class="page-related-next">
								<button name="seek-to" value="1" title="Next">Next</button>
								<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
									<title>Next</title>
									<line x1="0" y1="12" x2="24" y2="12"></line>
									<polyline points="15.51,20.49 24,12 15.51,3.51"></polyline>
								</svg>
							</div>
						)}
					</div>
					<div class="related-records-outer">
						<div class="related-records-inner" data-length={relatedRecords.length}>
							{relatedRecords.map((relatedProjectOrPublication) => (
								<article class="related-record" data-type={relatedProjectOrPublication.type}>
									<RecordTitle source={relatedProjectOrPublication} level={3} withLink={true} />
									<RecordImage source={relatedProjectOrPublication} sizes="(min-width: 1025px) 30vw, (max-width: 640px) 100vw, (max-width: 896px) 50vw, 40vw" />
								</article>
							))}
						</div>
					</div>
				</section>
			)}
		</footer>
	)}
</div>

<style lang="scss" is:global>
	@use "@styles/mixins";
	.page {
		flex: 1;
		display: flex;
		flex-flow: column nowrap;
		padding-block-start: var(--spacer-400);
	}
	.page-footer {
		margin-block-start: auto;
	}
	.page-body {
		// flex: 1;
		display: grid;
		grid-template-columns: [all-start] 10% [content-start] 1fr [content-end] 10% [all-end];
		column-gap: var(--spacer-400);
		* {
			min-width: 0;
			min-height: 0;
		}
		& > * {
			grid-column: content;
		}
		& > *.breakout {
			grid-column: all;
		}
		&:last-child {
			margin-block-end: env(safe-area-inset-bottom, 0px);
		}
		@media (max-width: 1024px) {
			display: flex;
			flex-direction: column;
			column-gap: 0;
			grid-template-columns: unset;
		}
	}
	.page-credits {
		margin-inline: calc(10% + var(--spacer-400));
		margin-block-end: var(--spacer-400);
		padding-block-start: var(--spacer-400);
		border-block-start: 1px solid var(--color-5);
		&:last-child {
			margin-block-end: calc(var(--spacer-400) + env(safe-area-inset-bottom, 0px));
		}
		@media (max-width: 1024px) {
			margin-inline: 0;
		}
	}
	.page-related {
		margin-inline: calc(var(--body-inline-spacing) * -1);
		padding-block-start: var(--spacer-400);
		padding-block-end: env(safe-area-inset-bottom, 0px);
		background: var(--color-1);
	}
	.page-related-headers {
		display: flex;
		align-items: flex-start;
		column-gap: var(--spacer-400);
		margin-inline: calc(((100% - (var(--spacer-400) * 2)) * 0.1) + var(--body-inline-spacing) + var(--spacer-400));
		margin-block-end: var(--spacer-400);
		@media (max-width: 1024px) {
			margin-inline: var(--body-inline-spacing);
		}
	}
	.page-related-headers > * {
		margin-block: auto;
	}
	.page-related-marker {
		margin-inline-end: auto;
		padding-block: var(--spacer-50);
		color: var(--color-3);
	}
	.page-related-previous,
	.page-related-next {
		& {
			position: relative;
			color: var(--color-4);
			@include mixins.hover-text();
		}
		button {
			all: unset;
			position: absolute;
			inset: 0;
			opacity: 0;
			cursor: pointer;
			z-index: 1;
			font-size: 0px;
		}
		svg {
			display: block;
			width: calc(1em + (var(--spacer-50) * 2));
			height: calc(1em + (var(--spacer-50) * 2));
			fill: transparent;
			stroke: currentColor;
			stroke-width: 1.2px;
			overflow: visible;
			stroke-linejoin: round;
			stroke-linecap: round;
			cursor: pointer;
			* {
				vector-effect: non-scaling-stroke;
			}
		}
	}
	.related-records-outer {
		overflow-x: auto;
		scroll-snap-type: x mandatory;
		scroll-snap-stop: always;
		scroll-behavior: smooth;
		-webkit-mask-image: linear-gradient(to right, transparent, black calc(var(--body-inline-spacing) + 7.5%), black calc(100% - var(--body-inline-spacing) - 7.5%), transparent);
		mask-image: linear-gradient(to right, transparent, black calc(var(--body-inline-spacing) + 7.5%), black calc(100% - var(--body-inline-spacing) - 7.5%), transparent);
		color: var(--color-5);
		@include mixins.no-scrollbar();
		@media (max-width: 1024px) {
			-webkit-mask-image: linear-gradient(to right, transparent, black calc(var(--body-inline-spacing)), black calc(100% - var(--body-inline-spacing)), transparent);
			mask-image: linear-gradient(to right, transparent, black calc(var(--body-inline-spacing)), black calc(100% - var(--body-inline-spacing)), transparent);
		}
	}
	.related-records-inner {
		display: flex;
		flex-flow: row nowrap;
		align-items: flex-start;
		justify-content: flex-start;
		column-gap: var(--spacer-400);
		margin-inline: calc(((100% - (var(--spacer-400) * 2)) * 0.1) + var(--body-inline-spacing) + var(--spacer-400));
		padding-block-end: calc(var(--spacer-400) * 3);
		--related-column-count: 3;
		&::after {
			content: "";
			height: 1px;
			flex: 0 0 calc(((100vw - (var(--spacer-400) * 2)) * 0.1) + var(--body-inline-spacing));
			@media (max-width: 1024px) {
				flex: 0 0 calc(var(--body-inline-spacing) - var(--spacer-400) + 1px);
			}
		}
		@media (max-width: 1024px) {
			margin-inline: var(--body-inline-spacing);
			--related-column-count: 3.333;
			&[data-length="3"],
			&[data-length="2"],
			&[data-length="1"] {
				--related-column-count: 3;
			}
		}
		@media (max-width: 896px) {
			--related-column-count: 2.1665;
			&[data-length="2"],
			&[data-length="1"] {
				--related-column-count: 2;
			}
		}
		@media (max-width: 640px) {
			--related-column-count: 1.1665;
			&[data-length="1"] {
				--related-column-count: 1;
			}
		}
	}
	.related-record {
		& {
			position: relative;
			flex: 0 0 calc((100% / var(--related-column-count)) - var(--spacer-400) + (var(--spacer-400) / var(--related-column-count)));
			display: flex;
			flex-direction: column;
			row-gap: var(--spacer-50);
			scroll-snap-align: center;
			text-wrap: pretty;
			text-wrap: balance;
			@include mixins.hover-image();
		}
		.record-image {
			order: 1;
			margin-block-end: 0.15em;
		}
		.record-title {
			order: 2;
		}
		.record-title-baseline {
			font-weight: 700;
		}
		.record-title-separator {
			position: absolute;
			opacity: 0;
			font-size: 0px;
		}
		.record-subtitle {
			display: block;
			margin-block-start: var(--spacer-50);
		}
		.record-title a::after {
			content: "";
			position: absolute;
			inset: 0;
			z-index: 1;
		}
	}
</style>

<script>
	const seekButtons = document.querySelectorAll(`button[name="seek-to"]`);
	seekButtons?.forEach((button) => {
		button.addEventListener("click", handleSeekTo);
	});
	function handleSeekTo(event) {
		const button = event.target;
		const buttonDirection = parseInt(button.value);
		const scrollContainer = button.closest(".page-related").querySelector(".related-records-outer");
		const flexContainer = button.closest(".page-related").querySelector(".related-records-inner");
		const recordWidth = scrollContainer.querySelector(".related-record").getBoundingClientRect().width;
		const columnGap = parseFloat(window.getComputedStyle(flexContainer).getPropertyValue("column-gap"));
		scrollContainer.scrollLeft = scrollContainer.scrollLeft + ((recordWidth + columnGap) * buttonDirection);
	};

	const firstRelatedRecord = document.querySelector(`.related-record:first-of-type`);
	const lastRelatedRecord = document.querySelector(`.related-record:last-of-type`);
	const seekPreviousButon = document.querySelector(`.page-related-previous`) as HTMLElement;
	const seekNextButton = document.querySelector(`.page-related-next`) as HTMLElement;
	const firstRelatedRecordObserver = seekPreviousButon && new IntersectionObserver((entries) => {
		entries.forEach((entry) => {
			seekPreviousButon.style.setProperty("visibility", entry.intersectionRatio === 1 ? "hidden" : "visible");
		});
	}, {
		threshold: 1,
		rootMargin: "100% 0% 100% 0%",
	});
	const lastRelatedRecordObserver = seekNextButton && new IntersectionObserver((entries) => {
		entries.forEach((entry) => {
			seekNextButton.style.setProperty("visibility", entry.intersectionRatio === 1 ? "hidden" : "visible");
		});
	}, {
		threshold: 1,
		rootMargin: "100% 0% 100% 0%",
	});
	firstRelatedRecordObserver?.observe(firstRelatedRecord);
	lastRelatedRecordObserver?.observe(lastRelatedRecord);
</script>