---
const {
	rich = false,
	small = false,
	muted = false,
	...rest
} = Astro.props;

const Element = rich === true ? "div" : "p";
---

<Element class={rich === true ? "rich-text" : "plain-text"} data-small={small === true ? "true" : null} data-muted={muted === true ? "true" : null} {...rest}>
	<slot />
</Element>

<style lang="scss" is:global>
	.plain-text, .rich-text {
		line-height: 1.3;
		&[data-small="true"] {
			font-size: var(--font-size-x-small);
			a {
				background-size: 1px 1px;
			}
		}
		&[data-muted="true"] {
			color: var(--color-text-light);
		}
	}
	.rich-text {
		h3 {
			font-size: var(--fslarge);
			font-weight: var(--fwbold);
			line-height: 1;
		}
		blockquote {
			font-family: var(--ffserif);
			font-size: var(--fssmall);
			padding-inline: 1.5rem;
			border-inline-start: 1px solid var(--color-text-x-light);
			// border-inline-end: 1px solid var(--color-text-x-light);
		}
		.note {
			font-size: var(--fssmall);
			--color-text-normal: var(--color-text-light);
		}
		strong {
			font-weight: var(--fwbold);
		}
		em {
			font-style: italic;
		}
		del {
			text-decoration: line-through;
		}
		sup {
			font-size: 0.61875em;
		}
		li {
			padding-inline-start: 0.5rem;
			margin-inline-start: 1rem;
		}
		a {
			background-image: linear-gradient(to bottom, var(--color-link-underline), var(--color-link-underline));
			background-size: 1px 2px;
			background-repeat: repeat-x;
			background-position: 0 100%;
		}
		:is(p, h3, blockquote, .note, ul, ol, figure):empty {
			display: none;
		}
		:is(p, h3, blockquote, .note, ul, ol, figure):not(:empty)
		+ :is(p, h3, blockquote, .note, ul, ol, figure):not(:empty) {
			&:not(blockquote + blockquote) {
				margin-block-start: 0.5rem;
			}
		}
		blockquote + blockquote {
			padding-block-start: 0.5rem;
		}
	}
</style>