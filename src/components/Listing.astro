---
import RecordTitle from "@components/RecordTitle.astro";
import RecordDate from "@components/RecordDate.astro";
import RecordDescription from "@components/RecordDescription.astro";
import RecordBody from "@components/RecordBody.astro";
import RecordTags from "@components/RecordTags.astro";
import RecordImage from "@components/RecordImage.astro";
import RecordRelated from "@components/RecordRelated.astro";
import type { RecordProps, TagNames } from "@lib/types.astro";
import type { ProjectProps } from "@projects/[slug].astro";
import type { PublicationProps } from "@publications/[slug].astro";
import Link from "./Link.astro";

type DatasetGroupingMethods = "period" | TagNames;

type DatasetRecordGroup = {
	marker: string;
	records: RecordProps[];
	description?: string;
	method: DatasetGroupingMethods;
};

export type DatasetRecordGroups = {
	[key: string]: DatasetRecordGroup;
};

export function assignRecordToGroup(record: RecordProps, params: { group: DatasetRecordGroups; method: DatasetGroupingMethods; key: string; marker: string; description?: string; }) {
	const {
		group,
		method,
		key,
		marker,
		description,
	} = params;
	if (!group[key]) {
		group[key] = {
			marker: marker,
			records: [],
			description: description,
			method: method,
		};
	};
	if (group[key] && group[key].records) {
		group[key].records.push(record);
	};
};

type Props = {
	source: DatasetRecordGroups;
	originalSet?: RecordProps[];
	keys?: string[];
	densities?: ("1" | "2" | "3")[];
	filters?: {
		[key in TagNames]?: DatasetRecordGroups;
	};
	background?: "none" | "polka-dot";
};

const {
	source,
	originalSet,
	keys = source && typeof source === "object" && Object.keys(source),
	densities = [1],
	filters,
	background = "none",
} = Astro.props;

function getRecordTags(record: ProjectProps | PublicationProps, tagType: TagNames) {
	return record && tagType && record[tagType] && record[tagType].length !== 0
		? record[tagType].map((tag) => tag.type === "location" ? tag.locale : tag.slug.current)?.join(" ")
		: "";
};
---

{keys && keys.length !== 0 && (
	<div
		class="listing"
		data-density={densities[0]}
		data-has-multiple-densities={densities?.length > 1 ? "true" : "false"}
		data-has-multiple-keys={keys.length > 1 ? "true" : "false"}
		data-has-filters={filters && Object.keys(filters).length !== 0 ? "true" : "false"}
		data-background={background}
		data-ready="false"
	>
		{(densities?.length > 1 || (filters && Object.keys(filters).length !== 0)) && (
			<div class="listing-headers">
				{densities && densities.length > 1 && (
					<div class="density-switches listing-header">
						{densities.sort().map((density, index) => (
							<div class="density-switch listing-header-item">
								<input type="radio" name="switch-density-to" id={`switch-density-to-${density}`} value={density} autocomplete="off" checked={index === 0} />
								<label for={`switch-density-to-${density}`}>
									{
										density === "1" ? (<svg viewBox="0 0 12 12" width="12" height="12" xmlns="http://www.w3.org/2000/svg"><title>Timeline</title><path class="d1-var1" d="M7.3,8.9V6 M4.8,6V3.1 M2.2,6h7.7 M2.2,8.9h7.7V3.1H2.2V8.9z"></path><path class="d1-var2" d="M2.2,8.9h7.7V3.1H2.2V8.9z"></path></svg>)
										: density === "2" ? (<svg viewBox="0 0 12 12" width="12" height="12" xmlns="http://www.w3.org/2000/svg"><title>Grid</title><path d="M2.2,3.1h7.7v5.8H2.2V3.1z M2.2,6h7.7 M6,3.1v5.8"></path></svg>)
										: density === "3" ? (<svg viewBox="0 0 12 12" width="12" height="12" xmlns="http://www.w3.org/2000/svg"><title>List</title><path d="M2.2,7.5h7.7 M2.2,4.6h7.7 M2.2,6h7.7 M2.2,3.1h7.7v5.8H2.2V3.1z"></path></svg>)
										: null
									}
								</label>
							</div>
						))}
					</div>
				)}
				{filters && Object.keys(filters).length !== 0 && (
					<div class="filter-switches listing-header">
						{Object.keys(filters).filter((filter) => Object.keys(filters[filter])?.length !== 0)?.map((tagName) => (
							<div class="filter-switch listing-header-item" data-length={Object.keys(filters[tagName])?.length || "0"}>
								<input type="checkbox" name="switch-filter-to" id={`switch-filter-to-${tagName}`} value={tagName} autocomplete="off" />
								<label for={`switch-filter-to-${tagName}`}>{`${tagName.charAt(0)?.toUpperCase()}${tagName.slice(1)}`}</label>
							</div>
						))}
					</div>
					<div class="filter-lists">
						{Object.keys(filters).map((tagName) => {
							const tagType = (
								tagName === "types" ? "type"
								: tagName === "subjects" ? "subject"
								: tagName === "collections" ? "collection"
								: tagName === "locations" ? "location"
								: null
							);
							const correspondingTagObject = filters[tagName];
							return correspondingTagObject && Object.keys(correspondingTagObject) && Object.keys(correspondingTagObject).length !== 0 && (
								<ul class="filter-list" data-type={tagType} hidden="true">
									{Object.keys(correspondingTagObject).sort((a, b) => filters[tagName][b]?.records?.length - filters[tagName][a]?.records?.length).map((key) => {
										const correspondingFilterObject = filters[tagName][key];
										return (
											<li class="filter" data-length={correspondingFilterObject.records?.length}>
												<Link href={`?${tagType}=${key}`} data-type={tagType} data-slug={key}>
													{correspondingFilterObject.marker}
												</Link>
											</li>
										);
									})}
								</ul>
							);
						})}
					</div>
				)}
			</div>
			<ul class="active-filters">
				{Object.keys(filters).map((tagName) => {
					const tagType = (
						tagName === "types" ? "type"
						: tagName === "subjects" ? "subject"
						: tagName === "collections" ? "collection"
						: tagName === "locations" ? "location"
						: null
					);
					const correspondingTagObject = filters[tagName];
					return correspondingTagObject && Object.keys(correspondingTagObject) && Object.keys(correspondingTagObject).length !== 0 && Object.keys(correspondingTagObject).map((key) => {
						const correspondingFilterObject = filters[tagName][key];
						return (
							<li class="active-filter" hidden="true">
								<Link href={`?${tagType}=${key}`} data-marker={`${tagType.charAt(0)?.toUpperCase()}${tagType.slice(1)}: `} data-type={tagType} data-slug={key}>
									{correspondingFilterObject.marker}
								</Link>
							</li>
						);
					})
				})}
			</ul>
		)}
		{keys?.map((key) => {
			const correspondingObject = source[key];
			const correspondingObjectLength = correspondingObject.records?.length || 0;
			return (
				<div class="listing-row" data-length={correspondingObjectLength.toString()}>
					{correspondingObject.marker && (
						<div class="record-marker">
							<h2>
								{correspondingObject.marker}
							</h2>
						</div>
					)}
					<div class="record-group" data-method={correspondingObject.method} id={key}>
						{correspondingObject.records?.map((record) => {
							const originalIndex = originalSet?.findIndex((item) => item === record) || 0;
							const alignment =
								originalIndex % 3 === 0 ? "middle"
								: originalIndex % 2 === 0 ? "right"
								: "left";
							return (
								<article
									id={record.type === "news" && record.slug.current}
									class="record"
									data-type={record.type}
									data-size={record.type === "project" ? record.listingDisplaySize : "medium"}
									data-alignment={record.type === "project" ? record.listingAlignment : "auto"}
									data-has-image={record.type !== "story" && record.image?.asset ? "true" : "false"}
									data-orientation={record.type !== "story" && record.image?.asset ? (record.image?.metadata?.dimensions?.aspectRatio > 1.1 ? "landscape" : "portrait") : (record.type === "news" ? "landscape" : "portrait")}
									data-start-date={(record.type === "project" || record.type === "story") ? record.date.startDate : record.date}
									data-end-date={(record.type === "project" || record.type === "story") ? (record.date.hasDuration && record.date.endDate && !record.date.isOngoing ? record.date.endDate : record.date.startDate) : record.date}
									data-half={originalIndex <= originalSet.filter((record) => record.type !== "story")?.length / 2 ? "upper" : "lower"}
									data-types={(record.type === "project" || record.type === "publication") && getRecordTags(record, "types")}
									data-subjects={(record.type === "project" || record.type === "publication") && getRecordTags(record, "subjects")}
									data-collections={(record.type === "project" || record.type === "publication") && getRecordTags(record, "collections")}
									data-locations={(record.type === "project" || record.type === "publication") && getRecordTags(record, "locations")}
								>
									<RecordTitle source={record} level={3} withLink={true} />
									<RecordDate source={record} />
									<RecordDescription source={record} />
									<RecordBody source={record} />
									<RecordTags source={record} tags={["types", "collections"]} withLinks={true} />
									<RecordImage
										source={record}
										sizes={
											record.type === "project" && record.listingDisplaySize === "large" ? "(min-width: 1025px) 80vw, 100vw"
											: record.type === "project" && record.listingDisplaySize === "medium" ? "(min-width: 1025px) 50vw, (max-width: 768px) 100vw, 70vw"
											: record.type === "project" && record.listingDisplaySize === "small" ? "(min-width: 1025px) 30vw, (max-width: 640px) 100vw, (max-width: 768px) 70vw, 40vw"
											: record.type === "publication" ? "(min-width: 1025px) 30vw, (max-width: 768px) 60vw, 40vw"
											: record.type === "news" || record.type === "press" ? "(min-width: 1025px) 50vw, (max-width: 768px) 100vw, 70vw"
											: null
										}
									/>
									<RecordRelated source={record} />
								</article>
							);
						})}
					</div>
				</div>
			);
		})}
	</div>
	<noscript>
		<style>
			.listing {
				visibility: visible !important;
			}
		</style>
	</noscript>
)}

<style lang="scss" is:global>
	@use "@styles/mixins";
	.listing[data-ready="false"] {
		visibility: hidden;
	}
	.listing {
		// flex: 1;
		display: grid;
		grid-template-columns: [all-start] 0 [left-start] var(--left) [left-end] var(--spacer-left) [content-start] 1fr [content-end] var(--spacer-right) [right-start] var(--right) [right-end] 0 [all-end];
		margin-block-start: var(--listing-inner-spacing);
		--left: 10%;
		--right: 10%;
		&:where([data-has-multiple-densities="false"]) {
			--left: 15%;
			--right: 15%;
		}
		--spacer-left: var(--spacer-400);
		--spacer-right: var(--spacer-400);
		--listing-headers-height: calc(1em + var(--spacer-350) + var(--spacer-350) + 1px + 1px);
		@media (max-width: 1024px) {
			--right: 0px;
			--spacer-right: 0px;
			&:not([data-has-multiple-keys="true"]) {
				--left: 0px;
				--spacer-left: 0px;
			}
		}
		@media (max-width: 896px) {
			&[data-has-multiple-keys="true"] {
				--left: 1em;
			}
		}
		&[data-density="1"] {
			--listing-inner-spacing: calc(var(--spacer-400) * 3);
			padding-block-end: env(safe-area-inset-bottom, 0px);
			@media (max-width: 896px) {
				--listing-inner-spacing: calc(var(--spacer-400) * 2);
			}
			&[data-background="polka-dot"] {
				@include mixins.polka-dot-background();
			}
			&:not([data-background="none"]) {
				margin-block: 0;
				padding-block-start: var(--listing-inner-spacing);
				padding-inline: var(--body-inline-spacing);
				margin-inline: calc(var(--body-inline-spacing) * -1);
			}
		}
		&[data-density="2"] {
			--listing-inner-spacing: var(--spacer-400);
			margin-block-end: env(safe-area-inset-bottom, 0px);
		}
		&[data-density="3"] {
			--listing-inner-spacing: calc(var(--spacer-400) / 2);
			margin-block-end: calc(var(--listing-inner-spacing) + env(safe-area-inset-bottom, 0px));
		}
	}
	.listing-headers {
		& {
			@media (min-width: 641px) {
				position: sticky;
				top: calc(var(--header-height));
			}
			@media (max-width: 640px) {
				position: relative;
			}
			min-height: var(--listing-headers-height);
			grid-column: all;
			display: flex;
			flex-wrap: wrap;
			justify-content: space-between;
			column-gap: var(--spacer-400);
			height: fit-content;
			margin-block-start: calc(var(--listing-inner-spacing) * -1);
			margin-block-end: var(--listing-inner-spacing);
			padding-block: var(--spacer-350);
			background: var(--color-7);
			border-block-end: 1px solid var(--color-5);
			z-index: 4;
			header[data-mode="contrast"] ~ main .listing & {
				border-block-start: 1px solid var(--color-5);
			}
		}
		.listing-header {
			display: flex;
			column-gap: var(--spacer-350);
			row-gap: var(--spacer-200);
			@media (max-width: 384px) {
				column-gap: var(--spacer-100);
			}
		}
		.listing-header-item {
			position: relative;
			@include mixins.hover-text();
		}
		input {
			position: absolute;
			inset: 0;
			opacity: 0;
			cursor: pointer;
		}
		label {
			cursor: pointer;
		}
		.filter-switches {
			@media (max-width: 640px) {
				flex-flow: column wrap;
				height: calc(1em * 2 + (var(--spacer-200) + 0.15em));
			}
		}
		.filter-lists {
			flex-basis: 100%;
			min-width: 0;
		}
		.filter-list {
			list-style: none;
			display: flex;
			flex-wrap: wrap;
			column-gap: var(--spacer-400);
			row-gap: var(--spacer-300);
			margin-block-start: var(--spacer-350);
			padding: var( --spacer-300);
			border-radius: 0.375em;
			border: 1px solid var(--color-5);
			background: var(--color-6);
		}
		.filter {
			position: relative;
			display: flex;
			column-gap: var(--spacer-100);
			@include mixins.hover-text();
			&[data-length="0"] {
				display: none;
			}
		}
		.filter::before {
			content: attr(data-length);
			opacity: 0.333;
		}
		.filter a::after {
			content: "";
			position: absolute;
			inset: 0;
		}
		.density-switches {
			position: absolute;
			right: 0;
			top: var(--spacer-350);
		}
		.density-switch input:not(:checked) + label svg {
			opacity: 0.5;
			stroke-width: 1px;
		}
		.density-switch svg {
			display: block;
			width: 1.6em;
			height: 1.6em;
			margin-block-start: -0.3em;
			fill: transparent;
			stroke: currentColor;
			stroke-width: 1.2px;
			stroke-linejoin: round;
			* {
				vector-effect: non-scaling-stroke;
			}
			@media (min-width: 641px) {
				.d1-var2 {
					display: none;
				}
			}
			@media (max-width: 640px) {
				.d1-var1 {
					display: none;
				}
			}
		}
		.filter-switch[data-length="0"] {
			pointer-events: none;
			color: var(--color-4);
		}
		.filter-switch label::before {
			font-family: var(--font-family-mono);
			margin-inline-end: calc(var(--spacer-50) * 1.3);
			@media (max-width: 384px) {
				margin-inline-end: calc(var(--spacer-50));
			}
		}
		.filter-switch input:checked + label::before {
			content: "×";
			content: "×" / "";
		}
		.filter-switch input:not(:checked) + label::before {
			content: "+";
			content: "+" / "";
			opacity: 0.375;
		}
	}
	.active-filters {
		& {
			grid-column: all;
			list-style: none;
			position: sticky;
			top: var(--header-height);
			display: flex;
			align-items: flex-start;
			justify-content: flex-start;
			column-gap: var(--spacer-100);
			margin-inline: calc(var(--body-inline-spacing) * -1);
			margin-block-start: calc(var(--listing-inner-spacing) * -1);
			padding-inline-start: calc(var(--body-inline-spacing) + var(--left) + var(--spacer-left));
			padding-inline-end: calc(var(--body-inline-spacing) + var(--right) + var(--spacer-right));
			white-space: nowrap;
			overflow-x: auto;
			-webkit-mask-image: linear-gradient(to right, transparent, black calc(var(--body-inline-spacing) + var(--left) + var(--spacer-left)), black calc(100% - var(--body-inline-spacing) - var(--right) - var(--spacer-right)), transparent);
			mask-image: linear-gradient(to right, transparent, black calc(var(--body-inline-spacing) + var(--left) + var(--spacer-left)), black calc(100% - var(--body-inline-spacing) - var(--right) - var(--spacer-right)), transparent);
			// pointer-events: none;
			z-index: 4;
			@include mixins.no-scrollbar();
			@media (min-width: 641px) {
				top: calc(var(--header-height) + var(--listing-headers-height));
			}
		}
		.active-filter {
			order: 0;
			position: relative;
			padding-block: var(--spacer-350);
			// pointer-events: all;
			.listing[data-density="3"] & {
				padding-block-end: calc(var(--spacer-350) - (var(--listing-inner-spacing) / 1));
			}
		}
		.active-filter a {
			display: block;
			background: var(--color-1);
			color: var(--color-7);
			@include mixins.tag($border-color: var(--color-1));
			@include mixins.hover-text($withOpacity: true, $opacity: 0.75);
			@media (any-hover: hover) {
				&:hover::after {
					color: var(--color-7);
				}
			}
		}
		// .active-filter a::before {
		// 	content: attr(data-marker);
		// 	color: var(--color-3);
		// }
		.active-filter a::before {
			content: "";
			position: absolute;
			left: calc(var(--spacer-100) / -2);
			right: calc(var(--spacer-100) / -2);
			top: 0;
			bottom: 0;
			z-index: 1;
		}
		.active-filter a::after {
			content: "×";
			content: "×" / "";
			margin-inline-start: calc(var(--spacer-50) * 1.6);
			font-family: var(--font-family-mono);
			color: var(--color-3);
		}
	}
	.listing-row {
		&[data-length="0"] {
			display: none;
		}
		&:not([data-length="0"]) {
			display: contents;
		}
		.listing:not([data-has-multiple-keys="true"]) & {
			.record-marker {
				display: none;
			}
			.record-group {
				@media (max-width: 896px) {
					grid-column: all;
				}
			}
		}
		&:has(.record[data-type="story"]:only-of-type) {
			.record-marker {
				display: none;
			}
		}
	}
	.record-marker {
		& {
			grid-column: left;
		}
		h2 {
			position: sticky;
			top: calc(var(--header-height) + var(--spacer-350) + 0.15em);
			height: fit-content;
			margin-bottom: var(--listing-inner-spacing);
			color: var(--color-2);
		}
		.listing[data-has-filters="true"] &,
		.listing[data-has-other-densities="true"] & {
			@media (min-width: 641px) {
				h2 {
					top: calc(var(--header-height) + var(--listing-headers-height) + var(--spacer-350) + 0.333em + 1px);
				}
			}
		}
		@media (max-width: 896px) {
			h2 {
				writing-mode: vertical-rl;
			}
		}
		.listing[data-density="3"] & {
			h2 {
				margin-top: var(--listing-inner-spacing);
			}
		}
	}
	.record-group {
		& {
			grid-column: content;
		}
		.listing[data-density="1"] &,
		.listing[data-density="2"] & {
			display: flex;
			flex-flow: row wrap;
			align-items: flex-start;
		}
		.listing[data-density="1"] & {
			column-gap: calc(100% - 66.66% - 25%);
		}
		.listing[data-density="2"] & {
			column-gap: var(--listing-inner-spacing);
		}
	}
	.record {
		& {
			position: relative;
			line-height: 1.3;
			text-wrap: pretty;
			// text-wrap: balance;
			row-gap: var(--record-inner-spacing);
			background: var(--color-7);
			scroll-margin-block-start: calc(var(--header-height) + var(--spacer-400));
		}
		.listing[data-density="1"] &,
		.listing[data-density="2"] & {
			display: flex;
			flex-direction: column;
			margin-block-end: var(--listing-inner-spacing);
		}
		.listing[data-density="1"] & {
			&[data-type="story"] {
				width: fit-content;
			}
			&:not([data-type="story"]) {
				width: 100%;
			}
			&:not([data-type="press"]):not([data-type="news"]) {
				--record-inner-spacing: var(--spacer-50);
			}
			&[data-type="press"],
			&[data-type="news"] {
				padding: var(--spacer-400);
				--record-inner-spacing: var(--spacer-100);
			}
			&[data-alignment="auto"]:nth-of-type(even),
			&[data-alignment="right"] {
				@media (min-width: 769px) {
					margin-inline-start: auto;
				}
			}
			&[data-alignment="auto"]:nth-of-type(3n + 1),
			&[data-alignment="middle"] {
				@media (min-width: 769px) {
					margin-inline: auto;
				}
			}
			&[data-size="small"] {
				&[data-orientation="landscape"] {
					max-width: 33.33%;
				}
				&[data-orientation="portrait"] {
					max-width: 25%;
				}
				@media (max-width: 768px) {
					&[data-orientation="landscape"] {
						max-width: 66.66%;
					}
					&[data-orientation="portrait"] {
						max-width: 50%;
					}
				}
			}
			&[data-size="medium"] {
				&[data-orientation="landscape"] {
					max-width: 66.66%;
				}
				&[data-orientation="portrait"] {
					max-width: 50%;
				}
				@media (max-width: 768px) {
					&[data-orientation="landscape"] {
						max-width: 100%;
					}
					&[data-orientation="portrait"] {
						max-width: 75%;
					}
				}
			}
			&[data-size="small"],
			&[data-size="medium"] {
				@media (max-width: 640px) {
					&[data-orientation="landscape"] {
						max-width: 100%;
					}
					&[data-orientation="portrait"] {
						max-width: 100%;
					}
				}
			}
			&[data-size="large"] {
				&[data-orientation="landscape"] {
					max-width: 100%;
				}
				&[data-orientation="portrait"] {
					max-width: 100%;
				}
			}
		}
		.listing[data-density="2"] & {
			&[data-type="story"] {
				display: none;
			}
			&:not([data-type="story"]) {
				width: calc((100% - (var(--record-group-column-count) - 1) * var(--listing-inner-spacing)) / var(--record-group-column-count));
				--record-group-column-count: 3;
				--record-inner-spacing: var(--spacer-50);
				@media (max-width: 768px) {
					--record-group-column-count: 2;
				}
			}
		}
		.listing[data-density="3"] & {
			&[data-type="story"] {
				display: none;
			}
			&:not([data-type="story"]) {
				display: flex;
				flex-flow: row wrap;
				column-gap: calc(var(--spacer-50) * 1.6);
				row-gap: var(--spacer-50);
				margin-block-start: -0.15em;
				margin-inline-start: calc(var(--listing-inner-spacing) * -1);
				padding: var(--listing-inner-spacing);
				@include mixins.hoverable-area($from-background-color: var(--color-7));
			}
		}
	}
	.record-image {
		& {
			order: 1;
		}
		.listing[data-density="1"] &,
		.listing[data-density="2"] & {
			margin-block-end: 0.15em;
		}
		.listing[data-density="2"] .record[data-type="publication"] & {
			img {
				aspect-ratio: 21/29.7;
			}
		}
		.listing[data-density="2"] .record:not([data-type="publication"]) & {
			img {
				aspect-ratio: 16/9;
			}
		}
		.listing[data-density="3"] & {
			position: absolute;
			width: 25%;
			right: 0;
			background: var(--color-7);
			box-shadow: 0 0 calc(var(--listing-inner-spacing) * 3) calc(var(--listing-inner-spacing) * 3) var(--color-7);
			z-index: 1;
			@media (any-hover: none) {
				display: none;
			}
			@media (max-width: 896px) {
				display: none;
			}
		}
		.listing[data-density="3"] .record[data-half="upper"] & {
			top: 0;
		}
		.listing[data-density="3"] .record[data-half="lower"] & {
			bottom: 0;
		}
		@media (any-hover: hover) {
			.listing[data-density="3"] .record:not(:hover) & {
				display: none;
			}
		}
	}
	.record-title {
		& {
			order: 2;
		}
		.record:not([data-type="news"]) & {
			a::after {
				content: "";
				position: absolute;
				inset: 0;
				z-index: 2;
			}
		}
		.listing[data-density="1"] &,
		.listing[data-density="2"] & {
			.record-title-baseline {
				font-weight: 700;
			}
		}
		.listing[data-density="1"] .record:not([data-type="news"]):not([data-type="press"]) &,
		.listing[data-density="2"] .record:not([data-type="news"]):not([data-type="press"]) & {
			.record-title-separator {
				position: absolute;
				opacity: 0;
				font-size: 0px;
			}
			.record-subtitle {
				display: block;
				margin-block-start: calc(var(--record-inner-spacing) * 0.7);
				@media (max-width: 640px) {
					display: none;
				}
			}
		}
		.listing[data-density="1"] .record[data-type="news"] &,
		.listing[data-density="1"] .record[data-type="press"] & {
			font-size: var(--font-size-700);
		}
		.listing[data-density="3"] & {
			& {
				flex-basis: 100%;
			}
			.record-title-baseline {
				font-weight: 700;
			}
		}
		.listing[data-density="3"] .record:not([data-type="news"]):not([data-type="press"]) & {
			.record-title-separator {
				position: absolute;
				opacity: 0;
				font-size: 0px;
			}
			.record-subtitle {
				display: block;
				margin-block-start: var(--spacer-50);
			}
		}
	}
	.record-date {
		.record:not([data-type="press"]):not([data-type="news"]) & {
			order: 3;
		}
		.record[data-type="press"] &,
		.record[data-type="news"] & {
			order: 1;
		}
		.listing[data-density="1"] & {
			&[data-format="yearOnly"] {
				display: none;
			}
		}
		.listing[data-density="1"] .record[data-type="press"] &,
		.listing[data-density="1"] .record[data-type="news"] & {
			// color: var(--color-2);
		}
		.listing[data-density="2"] & {
			display: none;
		}
		.listing[data-density="3"] & {
			&:not([data-format="yearOnly"]) {
				display: inline;
			}
			&[data-format="yearOnly"] {
				display: none;
			}
			&::after {
				content: ",";
			}
		}
	}
	.record-description {
		& {
			order: 4;
		}
		.listing[data-density="1"] & {
			// color: var(--color-2);
			@include mixins.ellipsis-multiline($lines: 3);
		}
		.listing[data-density="2"] &,
		.listing[data-density="3"] & {
			display: none;
		}
	}
	.record-body {
		& {
			order: 5;
		}
		.listing[data-density="1"] & {
		}
		.listing[data-density="2"] &,
		.listing[data-density="3"] & {
			display: none;
		}
		.record[data-type="story"] & {
			font-size: var(--font-size-700);
			margin-block-start: -0.3em;
		}
		.record[data-type="news"] & {
			margin-block-start: calc(var(--spacer-400) - var(--record-inner-spacing) - 0.3em - 0.3em);
		}
	}
	.record-tags,
	.record-related {
		ul {
			list-style: none;
		}
		a {
			position: relative;
			z-index: 3;
			@include mixins.link();
			@include mixins.hover-text();
		}
		a::after {
			content: "";
			position: absolute;
			inset: -0.5em;
			z-index: 1;
		}
		.listing[data-density="1"] &,
		.listing[data-density="2"] & {
			ul {
				display: flex;
				flex-wrap: wrap;
				column-gap: var(--spacer-200);
			}
			li {
				display: inline;
				margin: 0;
				padding: 0;
			}
		}
		.listing[data-density="1"] & {
			ul {
				row-gap: calc(var(--record-inner-spacing) / 2);
			}
		}
		.listing[data-density="2"] & {
			@media (max-width: 640px) {
				li ~ li {
					display: none;
				}
			}
		}
		.listing[data-density="3"] & {
			&, ul {
				display: contents;
			}
			ul {
				list-style: none;
			}
			li {
				&:not(:last-of-type)::after {
					content: ",";
				}
			}
		}
	}
	.record-tags {
		&, li {
			order: 6;
		}
	}
	.record-related {
		&, li {
			order: 7;
		}
		.record .record-body ~ & {
			margin-block-start: calc(var(--spacer-400) - var(--record-inner-spacing) - 0.3em - 0.15em);
		}
	}
</style>

<script>
	import type { TagNames } from "@lib/types.astro";

	var upcomingRecords = []
	var ongoingRecords = [];
	const now = new Date();
	const recordsWithStartDates = document.querySelectorAll(`.record-group[data-method="period"] .record[data-start-date]`);
	recordsWithStartDates?.forEach((record) => {
		const startDateString = record.getAttribute("data-start-date");
		// const endDateString = record.getAttribute("data-end-date");
		const startDate = new Date(startDateString);
		// const endDate = endDateString && new Date(endDateString) || null;
		if (startDate > now) {
			updateRecordGroupLength(record, -1);
			upcomingRecords.push(record);
			record.remove();
			return;
		};
		if (record.closest(`.record-group[data-method="period"][id="ongoing"]`)) {
			updateRecordGroupLength(record, -1);
			ongoingRecords.push(record);
			record.remove();
			return;
		};
	});
	const upcomingRecordsGroup = document.querySelector(`.record-group[data-method="period"][id="upcoming"]`);
	upcomingRecords?.forEach((record) => {
		upcomingRecordsGroup?.appendChild(record);
		updateRecordGroupLength(record, 1);
		return;
	});
	const ongoingRecordsGroup = document.querySelector(`.record-group[data-method="period"][id="${now?.getFullYear()?.toString()}"]`);
	ongoingRecords?.forEach((record) => {
		ongoingRecordsGroup?.appendChild(record);
		updateRecordGroupLength(record, 1);
		return;
	});

	function filterRecordsByURLSearchParams() {
		const urlParams = new URLSearchParams(window.location.search);
		const types = urlParams.get("type")?.split(",")?.filter(Boolean);
		const subjects = urlParams.get("subject")?.split(",")?.filter(Boolean);
		const collections = urlParams.get("collection")?.split(",")?.filter(Boolean);
		const locations = urlParams.get("location")?.split(",")?.filter(Boolean);
		const buildSelectorsForParam = (key: TagNames, params: string[]) => {
			return key && params && params.length !== 0
				? params.filter(Boolean)?.map((param) => `[data-${key}~="${param}"]`)?.join("")
				: "";
		};
		try {
			updateActiveFiltersList({
				action: "add",
				types: types,
				subjects: subjects,
				collections: collections,
				locations: locations,
			});
			if (!urlParams || ((!types || types.length === 0) && (!subjects || subjects.length === 0) && (!collections || collections.length === 0) && (!locations || locations.length === 0))) {
				const hiddenRecords = document.querySelectorAll(`.record[hidden]`);
				hiddenRecords?.forEach((hiddenRecord) => {
					updateRecordGroupLength(hiddenRecord, 1);
					updateFilterListLengths(hiddenRecord, 1);
					updateFilterSwitchLengths();
					hiddenRecord.removeAttribute("hidden");
				});
				console.info("Filters cleared");
				return;
			};
			const selectorChain = (`${buildSelectorsForParam("types", types)}${buildSelectorsForParam("subjects", subjects)}${buildSelectorsForParam("collections", collections)}${buildSelectorsForParam("locations", locations)}`);
			const negativeQuery = (`.record:not(${selectorChain})`);
			const positiveQuery = (`.record${selectorChain}`);
			const negativeMatches: NodeListOf<HTMLElement> = document.querySelectorAll(negativeQuery);
			const positiveMatches: NodeListOf<HTMLElement> = document.querySelectorAll(positiveQuery);
			negativeMatches?.forEach((negativeMatch) => {
				const isCurrentlyHidden = negativeMatch.getAttribute("hidden") ? true : false;
				if (isCurrentlyHidden) { return; };
				updateRecordGroupLength(negativeMatch, -1);
				updateFilterListLengths(negativeMatch, -1);
				updateFilterSwitchLengths();
				negativeMatch.setAttribute("hidden", "true");
			});
			positiveMatches?.forEach((positiveMatch) => {
				const isCurrentlyHidden = positiveMatch.getAttribute("hidden") ? true : false;
				if (!isCurrentlyHidden) { return; };
				updateRecordGroupLength(positiveMatch, 1);
				updateFilterListLengths(positiveMatch, 1);
				updateFilterSwitchLengths();
				positiveMatch.removeAttribute("hidden");
			});
			console.info(`Filtering for \`${selectorChain}\``);
			return;
		} catch(error) {
			console.error(error);
			console.info("No matches found");
		};
	};
	filterRecordsByURLSearchParams();

	const tagLinks = document.querySelectorAll(`.record-tags a, .filter a, .active-filter a`);
	tagLinks?.forEach((tagLink) => {
		tagLink.addEventListener("click", handleTagLinkClick);
	});
	function handleTagLinkClick(event) {
		event.preventDefault();
		const urlParams = new URLSearchParams(window.location.search);
		const paramKey = event.target.getAttribute("data-type");
		const paramValue = event.target.getAttribute("data-slug");
		if (urlParams.has(paramKey)) {
			const currentParamValues = urlParams.get(paramKey)?.split(",");
			if (currentParamValues.includes(paramValue) && currentParamValues.length === 1) {
				urlParams.delete(paramKey, paramValue);
				updateActiveFiltersList({
					action: "remove",
					types: paramKey === "type" ? [paramValue] : null,
					subjects: paramKey === "subject" ? [paramValue] : null,
					collections: paramKey === "collection" ? [paramValue] : null,
					locations: paramKey === "location" ? [paramValue] : null,
				});
				console.info(`Key \`${paramKey}\` deleted`);
			} else if (currentParamValues.includes(paramValue) && currentParamValues.length > 1) {
				urlParams.set(paramKey, currentParamValues.filter((value) => value !== paramValue)?.join());
				updateActiveFiltersList({
					action: "remove",
					types: paramKey === "type" ? [paramValue] : null,
					subjects: paramKey === "subject" ? [paramValue] : null,
					collections: paramKey === "collection" ? [paramValue] : null,
					locations: paramKey === "location" ? [paramValue] : null,
				});
				console.info(`Value \`${paramValue}\` removed from key \`${paramKey}\``);
			} else {
				urlParams.set(paramKey, [...currentParamValues, paramValue]?.join());
				console.info(`Value \`${paramValue}\` added to key \`${paramKey}\``);	
			}
		} else {
			urlParams.append(paramKey, paramValue);
			console.info(`Value \`${paramValue}\` added to key \`${paramKey}\``);
		};
		const newUrlParams = urlParams.toString();
		history.replaceState({}, "", `${window.location.pathname}${newUrlParams ? "?" : ""}${newUrlParams}`);
		filterRecordsByURLSearchParams();
	};

	function updateRecordGroupLength(record: Element, modifier: 1 | -1) {
		if (!record || !modifier) { return; };
		const group = record.closest(".listing-row[data-length]");
		const currentLength = parseInt(group?.getAttribute("data-length"));
		return group?.setAttribute("data-length", (currentLength + modifier)?.toString());
	};

	function updateFilterListLengths(record: Element, modifier: -1 | 1) {
		const recordTypes = record.getAttribute("data-types")?.split(" ") || [];
		const recordSubjects = record.getAttribute("data-subjects")?.split(" ") || [];
		const recordCollections = record.getAttribute("data-collections")?.split(" ") || [];
		const recordLocations = record.getAttribute("data-locations")?.split(" ") || [];
		const updateFilterList = (type, slug) => {
			const correspondingFilter = document.querySelector(`.filter a[data-type="${type}"][data-slug="${slug}"]`);
			const parentListItem = correspondingFilter?.closest(".filter");
			const currentLength = parseInt(parentListItem?.getAttribute("data-length")) || 0;
			return parentListItem?.setAttribute("data-length", (currentLength + modifier)?.toString());
		};
		recordTypes?.forEach((recordType) => {
			return updateFilterList("type", recordType);
		});
		recordSubjects?.forEach((recordSubject) => {
			return updateFilterList("subject", recordSubject);
		});
		recordCollections?.forEach((recordCollection) => {
			return updateFilterList("collection", recordCollection);
		});
		recordLocations?.forEach((recordLocation) => {
			return updateFilterList("location", recordLocation);
		});
		updateListingHeadersHeight();
		return;
	};

	var activeFilterCounter = 0;
	function updateActiveFiltersList(params) {
		const {
			action,
			types,
			subjects,
			collections,
			locations,
		}: {
			action: "add" | "remove";
			types?: string[];
			subjects?: string[];
			collections?: string[];
			locations?: string[];
		} = params;
		const updateCorrespondingFilter = (type, slug) => {
			const correspondingActiveFilter: HTMLElement = document.querySelector(`.active-filter a[data-type="${type}"][data-slug="${slug}"]`)?.closest(".active-filter");
			if (action === "add") {
				if (correspondingActiveFilter.getAttribute("hidden") !== "true") { return; };
				activeFilterCounter++;
				correspondingActiveFilter.removeAttribute("hidden");
				correspondingActiveFilter.style.setProperty("order", activeFilterCounter?.toString());
				return;
			};
			return correspondingActiveFilter.setAttribute("hidden", "true");
		};
		types?.forEach((type) => updateCorrespondingFilter("type", type));
		subjects?.forEach((subject) => updateCorrespondingFilter("subject", subject));
		collections?.forEach((collection) => updateCorrespondingFilter("collection", collection));
		locations?.forEach((location) => updateCorrespondingFilter("location", location));
	};

	const densitySwitches = document.querySelectorAll(`input[name="switch-density-to"]`);
	densitySwitches?.forEach((densitySwitch) => {
		return densitySwitch.addEventListener("change", handleDensitySwitch);
	});
	function handleDensitySwitch(event: Event) {
		const selectedDensityValue = (event.target as HTMLInputElement).value;
		const parentListing = (event.target as HTMLInputElement).closest(".listing");
		return parentListing.setAttribute("data-density", selectedDensityValue);
	};

	const filterSwitches = document.querySelectorAll(`input[name="switch-filter-to"]`);
	filterSwitches?.forEach((filterSwitch) => {
		return filterSwitch.addEventListener("change", handleFilterSwitch);
	});
	function handleFilterSwitch(event: Event) {
		const filterSwitch = event.target as HTMLInputElement;
		const filterSwitchState = filterSwitch.checked;
		const selectedFilterValue = (event.target as HTMLInputElement).value;
		const selectedFilterType = (
			selectedFilterValue === "types" ? "type"
			: selectedFilterValue === "subjects" ? "subject"
			: selectedFilterValue === "collections" ? "collection"
			: selectedFilterValue === "locations" ? "location"
			: null
		);
		if (!selectedFilterType) { return; };
		const correspondingFilterList = document.querySelector(`.filter-list[data-type="${selectedFilterType}"]`);
		const otherFilterSwitches = document.querySelectorAll(`input[name="switch-filter-to"]:not([value="${selectedFilterValue}"])`);
		const otherFilterLists = document.querySelectorAll(`.filter-list:not([data-type="${selectedFilterType}"])`);
		if (filterSwitchState === true) {
			correspondingFilterList.removeAttribute("hidden");
		} else {
			correspondingFilterList.setAttribute("hidden", "true");
		};
		otherFilterSwitches?.forEach((otherFilterSwitch: HTMLInputElement) => otherFilterSwitch.checked = false );
		otherFilterLists?.forEach((otherFilterList) => otherFilterList.setAttribute("hidden", "true") );
		updateListingHeadersHeight();
	};

	function updateFilterSwitchLengths() {
		const filterLists = document.querySelectorAll(".filter-list");
		return filterLists?.forEach((filterList) => {
			const filterCount = filterList.querySelectorAll(`.filter:not([data-length="0"])`)?.length || 0;
			const correspondingFilterSwitch: HTMLInputElement = document.querySelector(`input[name="switch-filter-to"][value="${filterList.getAttribute("data-type")}s"]`);
			const correspondingFilterSwitchContainer = correspondingFilterSwitch?.closest(".filter-switch");
			correspondingFilterSwitchContainer.setAttribute("data-length", filterCount?.toString());
			if (filterCount === 0) {
				filterList.setAttribute("hidden", "true");
				correspondingFilterSwitch.checked = false;
			};
			return;
		});
	};

	window.addEventListener("resize", () => {
		debounce(handleWindowResize, 350);
	});
	function handleWindowResize() {
		updateListingHeadersHeight();
	};

	function updateListingHeadersHeight() {
		const listingHeaders: HTMLElement = document.querySelector(".listing-headers");
		if (!listingHeaders) { return; };
		const parentListing: HTMLElement = listingHeaders?.closest(".listing");
		parentListing?.style.removeProperty("--listing-headers-height");
		const listingHeadersHeight = listingHeaders.offsetHeight;
		return listingHeaders && parentListing && listingHeadersHeight && parentListing.style.setProperty("--listing-headers-height", `${listingHeadersHeight}px`);
	};

	var dTimer = 0;
	function debounce(callback, delay) {
		clearTimeout(dTimer);
		return dTimer = window.setTimeout(callback, delay);
	};

	function declareListingReadiness() {
		const listing = document.querySelector(".listing");
		return listing?.setAttribute("data-ready", "true");
	};
	declareListingReadiness();
</script>