---
import { PressListingSlugGroqQuery, ProjectsListingSlugGroqQuery, PublicationsListingSlugGroqQuery } from "@lib/groq";
import type { ListingProps, RecordProps, StoryProps } from "@lib/types.astro";
import sanityClient from "@root/sanity";
import type { HTMLAttributes } from "astro/types";

type Props = HTMLAttributes<"a"> & ({
	href: string;
	to?: never;
	append?: never;
} | {
	href?: never;
	to: Exclude<RecordProps, StoryProps> | ListingProps | "homepage" | "projectsListing" | "publicationsListing" | "pressListing";
	append?: string;
});

const {
	class: className,
	href,
	to,
	append = "",
	title,
	role,
	...rest
} = Astro.props;

const projectsListing = await sanityClient.fetch(ProjectsListingSlugGroqQuery);
const publicationsListing = await sanityClient.fetch(PublicationsListingSlugGroqQuery);
const pressListing = await sanityClient.fetch(PressListingSlugGroqQuery);

const resolvedLink =
	href && !to ? href
	: !href && to ? (
		typeof to === "object" && to.type === "project" ? `/${projectsListing.slug.current}/${to.slug.current}/`
		: typeof to === "object" && to.type === "publication" ? `/${publicationsListing.slug.current}/${to.slug.current}/`
		: typeof to === "object" && to.type === "news" ? `/${pressListing.slug.current}/#${to.slug.current}`
		: typeof to === "object" && to.type === "press" ? to.url
		: ((typeof to === "object" && to.type === "listing" && to.id === "homepage") || (typeof to === "string" && to === "homepage")) ? "/"
		: ((typeof to === "object" && to.type === "listing" && to.id === "projectsListing") || (typeof to === "string" && to === "projectsListing")) ? `/${projectsListing.slug.current}/`
		: ((typeof to === "object" && to.type === "listing" && to.id === "publicationsListing") || (typeof to === "string" && to === "publicationsListing")) ? `/${publicationsListing.slug.current}/`
		: ((typeof to === "object" && to.type === "listing" && to.id === "pressListing") || (typeof to === "string" && to === "pressListing")) ? `/${pressListing.slug.current}/`
		: null
	)
	: null
---

{resolvedLink && (
	<a class={className} href={resolvedLink + append} target={resolvedLink.startsWith("http") && "_blank"} rel={resolvedLink.startsWith("http") && "noindex nofollow"} title={title || (typeof to === "object" && to?.title)} role={role} {...rest}>
		<slot />
	</a>
) || (
	<slot />
)}