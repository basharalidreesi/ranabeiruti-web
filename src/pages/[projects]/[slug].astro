---
import { type ComplexDateProps } from "@components/ComplexDate.astro";
import Main from "@layouts/Main.astro";
import { ProjectsGroqQuery, ProjectsListingSlugGroqQuery } from "@lib/groq";
import sanityClient from "@root/sanity";
import type { CollectionProps, LocationProps, SanityImageMetadataObject, SubjectProps, TypeProps } from "@lib/types.astro";
import type { SanityImageObject } from "@sanity/image-url/lib/types/types";
import type { TypedObject } from "astro-portabletext/types";
import type { ProjectsListingProps } from "@projects/index.astro";
import Page, { type PageProps } from "@components/Page.astro";
import type { PublicationProps } from "@publications/[slug].astro";
import { portableTextToPlainText } from "@components/RichText.astro";

export type ProjectProps = {
	type: "project";
	slug: { current: string; };
	title: string;
	subtitle?: string;
	date: ComplexDateProps & {
		sortDate: string;
	};
	types: TypeProps[];
	locations?: LocationProps[];
	subjects?: SubjectProps[];
	collections?: CollectionProps[];
	image: SanityImageObject & SanityImageMetadataObject;
	description?: TypedObject[] | string;
	credits?: TypedObject[];
	relatedProjects?: ProjectProps[];
	relatedPublications?: PublicationProps[];
	page: PageProps;
	isListed: boolean,
	listingAlignment: "auto" | "left" | "middle" | "right",
	listingDisplaySize: "small" | "medium" | "large" | "breakout",
};

export async function getStaticPaths() {
	// const projects: ProjectProps[] = await sanityClient.fetch(ProjectsGroqQuery);
	const projects: ProjectProps[] = [];
	const projectsListing: ProjectsListingProps = await sanityClient.fetch(ProjectsListingSlugGroqQuery);
	return projects?.map((project) => {
		return {
			params: {
				projects: projectsListing.slug?.current,
				slug: project.slug?.current,
			},
			props: {
				...project,
			},
		};
	});
};

const project = Astro.props;
---

<Main title={project.title} description={portableTextToPlainText(project.description)} image={{ url: project.image.url, transformationQuery: `?w=1200&h=630&fit=crop&fp-x=${project.image.hotspot?.x || 0.5}&fp-y=${project.image.hotspot?.y || 0.5}&auto=format` }}>
	<Page source={project} />
</Main>