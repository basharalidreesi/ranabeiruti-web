---
import ComplexDate from "@components/ComplexDate.astro";
import Image from "@components/Image.astro";
import Link from "@components/Link.astro";
import PageBuilder from "@components/PageBuilder.astro";
import PortableText from "@components/PortableText.astro";
import Main from "@layouts/Main.astro";
import { ProjectGroqQuery, ProjectsListingSlugGroqQuery } from "@lib/groq";
import { LOCALES } from "@lib/locales";
import type { ProjectsListingProps, ProjectProps } from "@lib/types";
import sanityClient from "@root/sanity";

export async function getStaticPaths() {
	const projects: ProjectProps[]  = await sanityClient.fetch(ProjectGroqQuery);
	const projectsListing: ProjectsListingProps = await sanityClient.fetch(ProjectsListingSlugGroqQuery);
	return projects?.map((project) => {
		return {
			params: {
				projects: projectsListing.slug?.current,
				slug: project.slug?.current,
			},
			props: {
				...project,
			},
		};
	});
};

const project = Astro.props;

---

<Main title={project.title}>
	<article id="project">
		<header id="project-header">
			<PageBuilder source={project.page?.header} document={project} baseUrl={Astro.params.projects} />
		</header>
		<section id="project-body">
			<h2 class="display-none">Body</h2>
			{(
				(project.page.doesIncludeDescription && project.description && project.description.length !== 0)
				|| (project.page.doesIncludeCollections && project.collections && project.collections.length !== 0 && project.collections.filter((collection) => collection.description && collection.description.length !== 0).length !== 0)
			) && (
				<div id="description">
					{project.page.doesIncludeDescription && project.description && project.description.length !== 0 && (
						<PortableText source={project.description} />
					)}
					{project.page.doesIncludeCollections && project.collections && project.collections.length !== 0 && (
						project.collections.filter((collection) => collection.description && collection.description.length !== 0).map((collection) => (
							<PortableText source={collection.description} />
						))
					)}
				</div>
			)}
			<PageBuilder source={project.page?.body} document={project} />
		</section>
		<footer id="project-footer">
			{project.page.doesIncludeCredits && project.credits && project.credits.length !== 0 && (
				<section id="credits" aria-label="Credits">
					<h2 class="display-none">Credits</h2>
					<PortableText source={project.credits} />
				</section>
			)}
			{(
				(project.page.doesIncludeRelatedProjects && project.relatedProjects && project.relatedProjects.length !== 0)
				|| (project.page.doesIncludeRelatedNews && project.relatedNews && project.relatedNews.length !== 0)
				|| (project.page.doesIncludeRelatedPress && project.relatedPress && project.relatedPress.length !== 0)
			) && (
				<section id="related-content" aria-label="Related Content">
					<h2 id="related-content-title">Related</h2>
					{project.page.doesIncludeRelatedProjects && project.relatedProjects && project.relatedProjects.length !== 0 && project.relatedProjects.map((relatedProject) => (
						<article class="related-project">
							<h3 class="related-project-title">
								<Link href={`/${Astro.params.projects}/${relatedProject.slug.current}/`}>
									<strong class="related-project-title-baseline">{relatedProject.title?.trim()}{relatedProject.subtitle && (<span class="related-project-title-colon">:&nbsp;</span>)}</strong>{relatedProject.subtitle && (<span class="related-project-subtitle">{relatedProject.subtitle?.trim()}</span>)}
								</Link>
							</h3>
							<!-- <div class="related-project-tagline">
								<ul>
									<li><ComplexDate source={relatedProject.date} /></li>
									{[...(relatedProject.types || []), ...(relatedProject.locations || [])]?.filter(Boolean)?.map((tag) => (
										<li>{tag.type === "location" ? LOCALES.find((locale) => locale.value === tag.locale)?.title : tag.name?.trim()}</li>
									))}
								</ul>
							</div> -->
							<div class="related-project-image">
								<Image source={relatedProject.image} />
							</div>
						</article>
					))}
					<!-- {[...(project.page.doesIncludeRelatedNews && project.relatedNews && project.relatedNews.length !== 0 ? project.relatedNews : []), ...(project.page.doesIncludeRelatedPress && project.relatedPress && project.relatedPress.length !== 0 ? project.relatedPress : [])].map((relatedNewsOrPressItem) => (
						<article class={`related-${relatedNewsOrPressItem._type}-item`}>
							{relatedNewsOrPressItem.title}
						</article>
					))} -->
				</section>
			)}
		</footer>
	</article>
</Main>

<style lang="scss" is:global>
	#project {
		flex: 1;
		display: flex;
		flex-flow: column nowrap;
		padding-block-start: 1.5rem;
		line-height: var(--line-height-large);
	}
	#project-header,
	#project-body {
		display: grid;
		grid-template-columns: [all-start] 10% [content-start] 1fr [content-end] 10% [all-end];
		column-gap: 1.5rem;
		* {
			min-width: 0;
			min-height: 0;
		}
		& > * {
			grid-column: content;
		}
		& > *.breakout {
			grid-column: all;
		}
		@media (max-width: 1024px) {
			display: flex;
			flex-direction: column;
			column-gap: 0;
			grid-template-columns: unset;
		}
	}
	#project-header {
		padding-inline: 1.5rem;
		padding-block-start: 1.5rem;
		margin-block-end: 1.5rem;
		margin-inline: -1.5rem;
		margin-block-start: -1.5rem;
		background: var(--color-6);
	}
	#project-body {
		flex: 1;
	}
	#description {
		margin-block-end: 1.5rem;
		padding-block-end: 1.5rem;
		border-block-end: 1px solid var(--color-5);
		font-size: var(--font-size-small);
		color: var(--color-2);
	}
	#credits {
		margin-inline: calc(10% + 1.5rem);
		margin-block-end: 1.5rem;
		padding-block-start: 1.5rem;
		border-block-start: 1px solid var(--color-5);
		font-size: var(--font-size-small);
		color: var(--color-2);
		@media (max-width: 1024px) {
			margin-inline: 0;
		}
	}
	#related-content {
		display: flex;
		flex-wrap: wrap;
		gap: 1.5rem;
		padding-inline: calc(10% + 1.5rem + 1.5rem);
		padding-block: 1.5rem;
		margin-inline: -1.5rem;
		margin-block-end: 1.5rem;
		background: var(--color-6);
		--related-project-columns: 3;
		@media (max-width: 1024px) {
			padding-inline: 1.5rem;
		}
		@media (max-width: 896px) {
			--related-project-columns: 2;
		}
		@media (max-width: 640px) {
			--related-project-columns: 1;
		}
	}
	#related-content-title {
		flex-basis: 100%;
		color: var(--color-2);
	}
	.related-project {
		position: relative;
		flex-basis: calc((100% - ((var(--related-project-columns) - 1) * 1.5rem)) / var(--related-project-columns));
		display: flex;
		flex-direction: column;
		align-items: flex-start;
		gap: 0.25rem;
		height: fit-content;
		& > * {
			width: 100%;
		}
	}
	.related-project-image {
		order: 1;
		margin-block-end: 0.3em;
		img {
			display: block;
			height: 100%;
			width: 100%;
			object-fit: cover;
			aspect-ratio: 16/9;
		}
	}
	.related-project-title {
		order: 2;
		font-size: var(--font-size-medium);
		a::after {
			content: "";
			position: absolute;
			inset: 0;
			z-index: 1;
		}
	}
	.related-project-title-baseline {
		font-weight: var(--font-weight-bold);
		// text-transform: uppercase;
	}
	.related-project-title-colon {
		opacity: 0;
		position: absolute;
	}
	.related-project-subtitle {
		display: block;
		margin-block-start: 0.15rem;
	}
	.related-project-tagline {
		order: 3;
		font-size: var(--font-size-small);
	}
	.related-project-tagline ul {
		list-style: none;
	}
	.related-project-tagline li {
		display: inline;
		&:not(:last-of-type)::after {
			content: ", ";
		}
	}
</style>