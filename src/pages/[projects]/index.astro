---
import Main from "@layouts/Main.astro";
import Link from "@components/Link.astro";
import ProjectGrouping, { type ProjectGroupingProps } from "@components/ProjectGrouping.astro";
import { ProjectsListingGroqQuery } from "@lib/groq";
import { LOCALES } from "@lib/locales";
import type { BasicProjectProps } from "@projects/[slug].astro";
import sanityClient from "@root/sanity";

export type ProjectsListingProps = {
	slug: { current: string; };
	title: string;
	allProjects: BasicProjectProps[];
};

export type ProjectGroupings = typeof projectsByTitle | typeof projectsByPeriod | typeof projectsByType | typeof projectsByCollection | typeof projectsBySubject | typeof projectsByLocation;

export async function getStaticPaths() {
	const projectsListing: ProjectsListingProps = await sanityClient.fetch(ProjectsListingGroqQuery);
	return [{
		params: {
			projects: projectsListing.slug?.current,
		},
		props: {
			...projectsListing,
		},
	}];
};

const listing = Astro.props;

const projectsByTitle: ProjectGroupingProps = {};
const projectsByPeriod: ProjectGroupingProps = { "upcoming": { title: "Upcoming", projects: [], description: "Upcoming projects", }, };
const projectsByType: ProjectGroupingProps = {};
const projectsByCollection: ProjectGroupingProps = {};
const projectsBySubject: ProjectGroupingProps = {};
const projectsByLocation: ProjectGroupingProps = {};

function assignProjectToGrouping(project: BasicProjectProps, params: { grouping: ProjectGroupings; key: string; title: string; description?: string; }) {
	const { grouping, key, title, description } = params;
	if (!grouping[key]) {
		grouping[key] = {
			title: title,
			projects: [],
			description: description,
		};
	};
	if (grouping[key] && grouping[key].projects) {
		grouping[key].projects.push(project);
	};
};

listing.allProjects.forEach((project) => {
	assignProjectToGrouping(project, {
		grouping: projectsByTitle,
		key: Array.from(project.title.replace(/^(a |the |an )/gi, ""))[0].toLowerCase(),
		title: Array.from(project.title.replace(/^(a |the |an )/gi, ""))[0].toUpperCase(),
		description: `Projects beginning with ${Array.from(project.title.replace(/^(a |the |an )/gi, ""))[0].toUpperCase()}`,
	});
	assignProjectToGrouping(project, {
		grouping: projectsByPeriod,
		key: project.date.sortDate === "ongoing" ? project.date.sortDate : project.date.sortDate.split("-")[0],
		title: project.date.sortDate === "ongoing" ? "Now" : project.date.sortDate.split("-")[0],
		description: project.date.sortDate === "ongoing" ? "Ongoing projects" : `Projects from ${project.date.sortDate.split("-")[0]}`,
	});
	project.types && project.types.length !== 0
		? project.types?.forEach((type) => assignProjectToGrouping(project, {
			grouping: projectsByType,
			key: type.slug.current,
			title: type.name,
			description: `${type.name?.trim()} projects`,
		})) : assignProjectToGrouping(project, {
			grouping: projectsByType,
			key: "other",
			title: "Other",
			description: "Other projects",
		});
	project.collections && project.collections.length !== 0
		? project.collections?.forEach((collection) => assignProjectToGrouping(project, {
			grouping: projectsByCollection,
			key: collection.slug.current,
			title: collection.name,
			description: `Projects from ${collection.name?.trim()}`,
		})) : assignProjectToGrouping(project, {
			grouping: projectsByCollection,
			key: "other",
			title: "Other",
			description: "Other projects",
		});
	project.subjects && project.subjects.length !== 0
		? project.subjects?.forEach((subject) => assignProjectToGrouping(project, {
			grouping: projectsBySubject,
			key: subject.slug.current,
			title: subject.name,
			description: `${subject.name?.trim()} projects`,
		})) : assignProjectToGrouping(project, {
			grouping: projectsBySubject,
			key: "other",
			title: "Other",
			description: "Other projects",
		});
	project.locations?.forEach((location) => assignProjectToGrouping(project, {
		grouping: projectsByLocation,
		key: location.locale,
		title: LOCALES.find((locale) => location.locale === locale.value)?.title || location.locale,
		description: `Projects in ${LOCALES.find((locale) => location.locale === locale.value)?.title || location.locale}`,
	}));
});
---

<Main title={listing.title}>
	<h1 class="display-none">
		Projects
	</h1>
	<div id="dataset" data-view="cards" data-sort="date">
		<aside id="controls" aria-labelledby="controls-title">
			<h2 id="controls-title" class="display-none">Filtering and Viewing Options</h2>
			<div id="controls-inner">
				<section id="filters">
					<h3 class="control-group-title">Filter by</h3>
					<div class="control-group">
						<div class="control">
							<input type="checkbox" name="filter-by" id="filter-by-type" value="type" autocomplete="off" />
							<label class="hover-text" for="filter-by-type">Type</label>
						</div>
						<div class="control">
							<input type="checkbox" name="filter-by" id="filter-by-collection" value="collection" autocomplete="off" />
							<label class="hover-text" for="filter-by-collection">Collection</label>
						</div>
						<div class="control">
							<input type="checkbox" name="filter-by" id="filter-by-subject" value="subject" autocomplete="off" />
							<label class="hover-text" for="filter-by-subject">Subject</label>
						</div>
						<div class="control">
							<input type="checkbox" name="filter-by" id="filter-by-location" value="location" autocomplete="off" />
							<label class="hover-text" for="filter-by-location">Location</label>
						</div>
					</div>
				</section>
				<section id="views">
					<h3 class="control-group-title">View as</h3>
					<div class="control-group">
						<div class="control">
							<input type="radio" name="view-as" id="view-as-cards" value="cards" autocomplete="off" checked />
							<label class="hover-text" for="view-as-cards">Images</label>
						</div>
						<div class="control">
							<input type="radio" name="view-as" id="view-as-list" value="list" autocomplete="off" />
							<label class="hover-text" for="view-as-list">List</label>
						</div>
					</div>
				</section>
				<section id="tags" data-current="none">
					<h3 class="display-none">Tags</h3>
					<ul data-filter-method="type">
						<li>
							<Link href={`/${listing.slug.current}/`} class="hover-text" data-size={listing.allProjects.length}>All</Link>
						</li>
						{Object.keys(projectsByType).sort().map((type) => (
							<li>
								<Link href={`?type=${type}`} class="hover-text" data-size={projectsByType[type].projects.length}>{projectsByType[type].title}</Link>
							</li>
						))}
					</ul>
					<ul data-filter-method="collection">
						<li>
							<Link href={`/${listing.slug.current}/`} class="hover-text" data-size={listing.allProjects.length}>All</Link>
						</li>
						{Object.keys(projectsByCollection).filter((key) => key !== "other").sort().map((collection) => (
							<li>
								<Link href={`?collection=${collection}`} class="hover-text" data-size={projectsByCollection[collection].projects.length}>{projectsByCollection[collection].title}</Link>
							</li>
						))}
					</ul>
					<ul data-filter-method="subject">
						<li>
							<Link href={`/${listing.slug.current}/`} class="hover-text" data-size={listing.allProjects.length}>All</Link>
						</li>
						{Object.keys(projectsBySubject).filter((key) => key !== "other").sort().map((subject) => (
							<li>
								<Link href={`?subject=${subject}`} class="hover-text" data-size={projectsBySubject[subject].projects.length}>{projectsBySubject[subject].title}</Link>
							</li>
						))}
					</ul>
					<ul data-filter-method="location">
						<li>
							<Link href={`/${listing.slug.current}/`} class="hover-text" data-size={listing.allProjects.length}>All</Link>
						</li>
						{Object.keys(projectsByLocation).sort().map((location) => (
							<li>
								<Link href={`?location=${location}`} class="hover-text" data-size={projectsByLocation[location].projects.length}>{projectsByLocation[location].title}</Link>
							</li>
						))}
					</ul>
				</section>
				<section id="pills" class="display-none">
					<h3 class="display-none">Active Tags</h3>
					<template></template>
					<ul class="ln"></ul>
				</section>
			</div>
		</aside>
		<section id="sorts" aria-labelledby="sorts-title">
			<h2 id="sorts-title" class="display-none">Sorting Options</h2>
			<div id="sorts-inner">
				<div class="sort control">
					<input type="radio" name="sort-by" id="sort-by-title" value="title" autocomplete="off" />
					<label for="sort-by-title">Project</label>
				</div>
				<div class="sort control">
					<input type="radio" name="sort-by" id="sort-by-date" value="date" autocomplete="off" checked />
					<label for="sort-by-date">Date</label>
				</div>
				<div class="sort control">
					<input type="radio" name="sort-by" id="sort-by-type" value="type" autocomplete="off" />
					<label for="sort-by-type">Type</label>
				</div>
				<div class="sort control">
					<input type="radio" name="sort-by" id="sort-by-collection" value="collection" autocomplete="off" />
					<label for="sort-by-collection">Collection</label>
				</div>
			</div>
		</section>
		<section class="listing" data-sort-method="title" data-view-mode="list" aria-label="List of Projects, Grouped Alphabetically">
			<h2 class="display-none" aria-hidden="true">List of Projects, Grouped Alphabetically</h2>
			<ProjectGrouping source={projectsByTitle} keys={Object.keys(projectsByTitle).sort()} baseUrl={listing.slug.current} />
		</section>
		<section class="listing" data-sort-method="date" data-view-mode="cards list" aria-label="List of Projects, Grouped by Date">
			<h2 class="display-none" aria-hidden="true">List of Projects, Grouped by Date</h2>
			<ProjectGrouping source={projectsByPeriod} keys={["ongoing", "upcoming", ...Object.keys(projectsByPeriod).filter((key) => !["ongoing", "upcoming"].includes(key)).sort().reverse()]} baseUrl={listing.slug.current} />
		</section>
		<section class="listing" data-sort-method="type" data-view-mode="list" aria-label="List of Projects, Grouped by Type">
			<h2 class="display-none" aria-hidden="true">List of Projects, Grouped by Type</h2>
			<ProjectGrouping source={projectsByType} keys={[...Object.keys(projectsByType).filter((key) => !["other"].includes(key)).sort(), "other"]} baseUrl={listing.slug.current} />
		</section>
		<section class="listing" data-sort-method="collection" data-view-mode="list" aria-label="List of Projects, Grouped by Collection">
			<h2 class="display-none" aria-hidden="true">List of Projects, Grouped by Collection</h2>
			<ProjectGrouping source={projectsByCollection} keys={[...Object.keys(projectsByCollection).filter((key) => !["other"].includes(key)).sort((a, b) => projectsByCollection[b].projects?.length - projectsByCollection[a].projects?.length || a.localeCompare(b)), "other"]} baseUrl={listing.slug.current} />
		</section>
	</div>
</Main>

<style lang="scss" is:global>
	#dataset[data-view="cards"] .listing:not([data-view-mode~="cards"]),
	#dataset[data-view="list"][data-sort="title"] .listing:not([data-view-mode~="list"][data-sort-method="title"]),
	#dataset[data-view="list"][data-sort="date"] .listing:not([data-view-mode~="list"][data-sort-method="date"]),
	#dataset[data-view="list"][data-sort="type"] .listing:not([data-view-mode~="list"][data-sort-method="type"]),
	#dataset[data-view="list"][data-sort="collection"] .listing:not([data-view-mode~="list"][data-sort-method="collection"]),
	#dataset:not([data-view="list"]) #sorts {
		display: none;
	}
	#tags[data-current="none"],
	#tags[data-current="type"] > ul:not([data-filter-method="type"]),
	#tags[data-current="collection"] > ul:not([data-filter-method="collection"]),
	#tags[data-current="subject"] > ul:not([data-filter-method="subject"]),
	#tags[data-current="location"] > ul:not([data-filter-method="location"]) {
		display: none;
	}
	#controls, #sorts {
		line-height: 1;
	}
	#controls {
		position: sticky;
		top: var(--header-height);
		z-index: 98;
		padding-inline: calc(15% + 1.5rem + 1.5rem);
		margin-inline: -1.5rem;
		background: var(--color-7);
		font-size: var(--font-size-medium);
		@media (max-width: 1280px) {
			padding-inline-end: 1.5rem;
		}
		@media (max-width: 1024px) {
			padding-inline-start: 1.5rem;
		}
	}
	#controls-inner {
		display: flex;
		flex-wrap: wrap;
		column-gap: 1.5rem;
		row-gap: 1rem;
		padding-block: 1rem;
		border-block-end: 1px solid var(--color-5);
	}
	.control-group-title {
		color: var(--color-2);
	}
	.control-group {
		display: flex;
		column-gap: 0.75rem;
		row-gap: 0.75rem;
		@media (max-width: 512px) {
			flex-direction: column;
			flex-wrap: wrap;
			max-height: calc(2em + 0.75rem + 1px);
		}
	}
	.control {
		position: relative;
		input {
			position: absolute;
			inset: 0;
			opacity: 0;
		}
		input,
		input + label {
			cursor: pointer;
		}
		input + label {
			position: relative;
		}
		input + label::before {
			display: inline-block;
			margin-inline-end: 0.25rem;
			font-family: var(--font-family-mono);
			line-height: 1;
		}
		input:not(:checked) + label::before {
			color: var(--color-3);
		}
		input:checked + label::before {
			color: currentColor;
		}
	}
	#filters,
	#views {
		display: flex;
		align-items: baseline;
		column-gap: 0.75rem;
		row-gap: 0.75rem;
		@media (max-width: 768px) {
			flex-direction: column;
		}
	}
	#filters {
		flex: 1;
		label::before {
			content: "+";
			content: "+" / "";
		}
		input:checked + label::before {
			content: "×";
			content: "×" / "";
		}
		input:checked + label::after {
			content: "";
			position: absolute;
			display: block;
			left: 50%;
			transform: translateX(-50%);
			width: 1em;
			height: 0.5em;
			background: var(--color-7);
			top: calc(100% + 1rem - 0.5em - 1px);
			border-inline-start: 0.5em solid var(--color-7);
			border-inline-end: 0.5em solid var(--color-7);
			border-block-end: 0.5em solid var(--color-6);
			pointer-events: none;
			@media (max-width: 512px) {
				content: none;
			}
		}
	}
	#views {
		min-width: 3.75rem;
		input:checked + label::before {
			content: "✓";
			content: "✓" / "";
		}
	}
	#tags {
		flex-basis: calc(100% + 1.5rem);
		ul {
			display: flex;
			flex-wrap: wrap;
			column-gap: 1.5rem;
			row-gap: 0.75rem;
			padding: 0.75rem;
			background: var(--color-6);
			list-style: none;
		}
		a {
			display: flex;
		}
		a::before {
			content: attr(data-size);
			content: attr(data-size) / "";
			display: inline-block;
			margin-inline-end: 0.5rem;
			color: var(--color-3);
		}
	}
	#sorts {
		position: sticky;
		top: calc(var(--header-height) + (var(--font-size-medium) + 1rem + 1rem + 1px));
		z-index: 97;
		margin-inline: -1.5rem;
		padding-inline: calc(15% + 1.5rem + 1.5rem);
		background: var(--color-7);
		font-size: var(--font-size-medium);
		@media (max-width: 1280px) {
			padding-inline-end: 1.5rem;
		}
		@media (max-width: 1024px) {
			padding-inline-start: 1.5rem;
		}
	}
	#sorts-inner {
		display: flex;
		border-block-end: 1px solid var(--color-5);
	}
	.sort {
		position: relative;
		padding-block: 1rem;
		padding-inline: 0.75rem;
		background: transparent;
		transition: background-color 0.125s;
		--width-expand: (1ch + 0.75rem + 0.75rem);
		&:nth-of-type(1) {
			flex-basis: calc(100% / 4 * 2 - (var(--width-expand) / 3 * 1));
			@media (max-width: 1024px) {
				flex-basis: calc(100% / 4 * 1 - (var(--width-expand) / 3 * 1));
			}
		}
		&:nth-of-type(2) {
			flex-basis: calc(100% / 4 * 1 - (var(--width-expand) / 3 * 1));
		}
		&:nth-of-type(3) {
			flex-basis: calc(100% / 4 * 1 - (var(--width-expand) / 3 * 1));
		}
		&:nth-of-type(4) {
			flex-basis: calc(100% / 4 * 1 + var(--width-expand));
		}
		input:checked + label::before {
			content: "↓";
			content: "↓" / "";
		}
		@media (any-hover: hover) {
			&:hover {
				background: var(--color-6);
			}
		}
		@media (max-width: 1024px) {
			--width-expand: 0px;
		}
	}
</style>

<script>
	const dataset = document.querySelector("#dataset");
	const viewInputs = document.querySelectorAll(`input[name="view-as"]`);
	const sortInputs = document.querySelectorAll(`input[name="sort-by"]`);
	viewInputs?.forEach((input) => {
		return input.addEventListener("change", handleViewChange);
	});
	sortInputs?.forEach((input) => {
		return input.addEventListener("change", handleSortChange);
	});
	function handleViewChange(event: Event) {
		const selectedView = (event.target as HTMLInputElement).value;
		dataset.setAttribute("data-view", selectedView);
		return;
	};
	function handleSortChange(event: Event) {
		const selectedSort = (event.target as HTMLInputElement).value;
		dataset.setAttribute("data-sort", selectedSort);
		return;
	};

	const filterInputs = document.querySelectorAll(`input[name="filter-by"]`);
	filterInputs?.forEach((input) => {
		return input.addEventListener("change", handleFilteringChange);
	});
	function handleFilteringChange(event: Event) {
		const selectedFilter = (event.target as HTMLInputElement).value;
		const tagsList = document.querySelector("#tags");
		const otherFilters = document.querySelectorAll(`input[name="filter-by"]:not([value="${selectedFilter}"])`);
		if ((event.target as HTMLInputElement).checked === true) {
			tagsList.setAttribute("data-current", selectedFilter);
		} else {
			tagsList.setAttribute("data-current", "none");
		};
		otherFilters.forEach((filter: HTMLInputElement) => filter.checked = false );
		return;
	};

	var upcomingRecords = []
	var ongoingRecords = [];
	const upcomingRecordsGroup = document.querySelector("#upcoming");
	const ongoingRecordsGroup = document.querySelector("#ongoing");
	const recordsWithStartDates = document.querySelectorAll(`.listing[data-sort-method="date"] .record[data-start-date]`);
	recordsWithStartDates.forEach((record) => {
		const startDateString = record.getAttribute("data-start-date");
		const endDateString = record.getAttribute("data-end-date");
		const startDate = new Date(startDateString);
		const endDate = endDateString && new Date(endDateString) || null;
		const now = new Date();
		if (startDate > now) {
			updateRecordGroupSize(record, -1);
			upcomingRecords.push(record);
			record.remove();
			return;
		};
		if (endDate && startDate < now && endDate > now) {
			updateRecordGroupSize(record, -1);
			ongoingRecords.push(record);
			record.remove();
			return;
		};
	});
	upcomingRecords.forEach((record) => {
		upcomingRecordsGroup.appendChild(record);
		updateRecordGroupSize(record, 1);
		return;
	});
	ongoingRecords.forEach((record) => {
		ongoingRecordsGroup.appendChild(record);
		updateRecordGroupSize(record, 1);
		return;
	});
	function updateRecordGroupSize (record: Element, modifier: 1 | -1) {
		if (!record || !modifier) { return; };
		const group = record.closest(".record-group[data-size]");
		if (!group) { return; };
		return group.setAttribute("data-size", (parseFloat(group.getAttribute("data-size")) + modifier)?.toString());
	};
</script>