---
import Main from "@layouts/Main.astro";
import Dataset, { assignRecordToGrouping, type DatasetGroupingProps } from "@components/Dataset.astro";
import { ProjectsListingGroqQuery } from "@lib/groq";
import { LOCALES } from "@lib/locales";
import type { BasicProjectProps } from "@projects/[slug].astro";
import sanityClient from "@root/sanity";

export type ProjectsListingProps = {
	slug: { current: string; };
	title: string;
	allProjects: BasicProjectProps[];
};

export async function getStaticPaths() {
	const projectsListing: ProjectsListingProps = await sanityClient.fetch(ProjectsListingGroqQuery);
	return [{
		params: {
			projects: projectsListing.slug?.current,
		},
		props: {
			...projectsListing,
		},
	}];
};

const listing = Astro.props;

const projectsByTitle: DatasetGroupingProps = {};
const projectsByPeriod: DatasetGroupingProps = { "upcoming": { title: "Upcoming", records: [], description: "Upcoming projects", }, };
const projectsByType: DatasetGroupingProps = {};
const projectsByCollection: DatasetGroupingProps = {};
const projectsBySubject: DatasetGroupingProps = {};
const projectsByLocation: DatasetGroupingProps = {};

listing.allProjects.forEach((project) => {
	assignRecordToGrouping(project, {
		grouping: projectsByTitle,
		key: Array.from(project.title.replace(/^(a |the |an )/gi, ""))[0].toLowerCase(),
		title: Array.from(project.title.replace(/^(a |the |an )/gi, ""))[0].toUpperCase(),
		description: `Projects beginning with ${Array.from(project.title.replace(/^(a |the |an )/gi, ""))[0].toUpperCase()}`,
	});
	assignRecordToGrouping(project, {
		grouping: projectsByPeriod,
		key: project.date.sortDate === "ongoing" ? project.date.sortDate : project.date.sortDate.split("-")[0],
		title: project.date.sortDate === "ongoing" ? "Now" : project.date.sortDate.split("-")[0],
		description: project.date.sortDate === "ongoing" ? "Ongoing projects" : `Projects from ${project.date.sortDate.split("-")[0]}`,
	});
	project.types && project.types.length !== 0
		? project.types?.forEach((type) => assignRecordToGrouping(project, {
			grouping: projectsByType,
			key: type.slug.current,
			title: type.name,
			description: `${type.name?.trim()} projects`,
		})) : assignRecordToGrouping(project, {
			grouping: projectsByType,
			key: "other",
			title: "Other",
			description: "Other projects",
		});
	project.collections && project.collections.length !== 0
		? project.collections?.forEach((collection) => assignRecordToGrouping(project, {
			grouping: projectsByCollection,
			key: collection.slug.current,
			title: collection.name,
			description: `Projects from ${collection.name?.trim()}`,
		})) : assignRecordToGrouping(project, {
			grouping: projectsByCollection,
			key: "other",
			title: "Other",
			description: "Other projects",
		});
	project.subjects && project.subjects.length !== 0
		? project.subjects?.forEach((subject) => assignRecordToGrouping(project, {
			grouping: projectsBySubject,
			key: subject.slug.current,
			title: subject.name,
			description: `${subject.name?.trim()} projects`,
		})) : assignRecordToGrouping(project, {
			grouping: projectsBySubject,
			key: "other",
			title: "Other",
			description: "Other projects",
		});
	project.locations?.forEach((location) => assignRecordToGrouping(project, {
		grouping: projectsByLocation,
		key: location.locale,
		title: LOCALES.find((locale) => location.locale === locale.value)?.title || location.locale,
		description: `Projects from ${LOCALES.find((locale) => location.locale === locale.value)?.title || location.locale}`,
	}));
});
---

<Main title={listing.title}>
	<h1 class="display-none">
		{listing.title}
	</h1>
	<Dataset
		type="projects"
		of={[
			{
				type: "title",
				baseUrl: listing.slug.current,
			},
			{
				type: "date",
			},
			{
				type: "tags",
				length: listing.allProjects.length,
				tags: ["types", "collections", "locations"],
			},
			{
				type: "description",
				descriptions: ["local", "collections"],
			},
			{
				type: "image",
			},
		]}
		groupings={[
			{
				title: "List of Projects, Grouped Alphabetically",
				label: "Project",
				method: "title",
				object: projectsByTitle,
				keys: Object.keys(projectsByTitle)?.sort(),
				"columns@>=1536px": "20% 1fr 20%",
				"columns@<1536px": "15% 1fr 15%",
				"columns@<=1280px": "15% 1fr",
			},
			{
				title: "List of Projects, Grouped By Date",
				label: "Date",
				method: "date",
				object: projectsByPeriod,
				keys: ["ongoing", "upcoming", ...Object.keys(projectsByPeriod).filter((key) => !["ongoing", "upcoming"].includes(key)).sort().reverse()],
				default: true,
				"columns@>=1536px": "20% 1fr 20%",
				"columns@<1536px": "15% 1fr 15%",
				"columns@<=1280px": "15% 1fr",
			},
			{
				title: "List of Projects, Grouped By Type",
				label: "Type",
				method: "types",
				object: projectsByType,
				keys: [...Object.keys(projectsByType).filter((key) => !["other"].includes(key)).sort(), "other"],
				"columns@>=1536px": "20% 1fr 20%",
				"columns@<1536px": "15% 1fr 15%",
				"columns@<=1280px": "15% 1fr",
			},
			{
				title: "List of Projects, Grouped By Collection",
				label: "Collection",
				method: "collections",
				object: projectsByCollection,
				keys: [...Object.keys(projectsByCollection).filter((key) => !["other"].includes(key)).sort((a, b) => projectsByCollection[b].records?.length - projectsByCollection[a].records?.length || a.localeCompare(b)), "other"],
				"columns@>=1536px": "20% 1fr 20%",
				"columns@<1536px": "15% 1fr 15%",
				"columns@<=1280px": "15% 1fr",
			},
		]}
		controls={{
			views: [
				{
					title: "Images",
					mode: "cards",
					default: true,
				},
				{
					title: "List",
					mode: "list",
					"columns@>1024px": "2fr 1fr 1fr 1fr",
					"columns@<=1024px": "1fr 1fr 1fr 1fr",
				},
			],
			filters: [
				{
					title: "Type",
					method: "types",
					object: projectsByType,
					keys: Object.keys(projectsByType).sort(),
				},
				{
					title: "Collection",
					method: "collections",
					object: projectsByCollection,
					keys: Object.keys(projectsByCollection).filter((key) => key !== "other").sort(),
				},
				{
					title: "Subject",
					method: "subjects",
					object: projectsBySubject,
					keys: Object.keys(projectsBySubject).filter((key) => key !== "other").sort(),
				},
				{
					title: "Location",
					method: "locations",
					object: projectsByLocation,
					keys: Object.keys(projectsByLocation).sort(),
				},
			],
		}}
	/>
</Main>