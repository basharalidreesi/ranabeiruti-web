---
import Main from "@layouts/Main.astro";
import { ProjectsListingGroqQuery } from "@lib/groq";
import type { ProjectProps } from "@projects/[slug].astro";
import sanityClient from "@root/sanity";
import type { StoryProps } from "@lib/types.astro";
import Listing, { assignRecordToGroup, type DatasetRecordGroups } from "@components/Listing.astro";

export type ProjectsListingProps = {
	id: "projectsListing";
	type: "listing";
	slug: { current: string; };
	title: string;
	allProjectsAndStories: (ProjectProps | StoryProps)[];
};

export async function getStaticPaths() {
	const projectsListing: ProjectsListingProps = await sanityClient.fetch(ProjectsListingGroqQuery);
	return [{
		params: {
			projects: projectsListing.slug?.current,
		},
		props: {
			...projectsListing,
		},
	}];
};

const listing = Astro.props;

const projectsAndStoriesByPeriod: DatasetRecordGroups = {
	"ongoing": { marker: "Now", records: [], description: "Ongoing projects", method: "period", },
	"upcoming": { marker: "Upcoming", records: [], description: "Upcoming projects", method: "period", },
};

listing.allProjectsAndStories?.filter((projectOrStory) => (projectOrStory.type === "story") || (projectOrStory.type === "project" && projectOrStory.isListed))?.forEach((projectOrStory) => {
	assignRecordToGroup(projectOrStory, {
		group: projectsAndStoriesByPeriod,
		method: "period",
		key: projectOrStory.date.sortDate === "ongoing" ? "ongoing" : projectOrStory.date.sortDate?.split("-")?.[0],
		marker: projectOrStory.date.sortDate === "ongoing" ? "Now" : projectOrStory.date.sortDate.split("-")[0],
		description: projectOrStory.date.sortDate === "ongoing" ? "Ongoing projects" : `Projects from ${projectOrStory.date.sortDate.split("-")[0]}`,
	});
});
---

<Main title={listing.title}>
	<h1 class="display-none">
		{listing.title}
	</h1>
	<div class="coming-soon">
		<p>
			Coming soon
		</p>
	</div>
	<!-- <Listing
		source={projectsAndStoriesByPeriod}
		originalSet={listing.allProjectsAndStories}
		keys={["ongoing", "upcoming", ...Object.keys(projectsAndStoriesByPeriod).filter((key) => !["ongoing", "upcoming"].includes(key)).sort().reverse()]?.filter(Boolean)}
		densities={["1", "2", "3"]}
		filters={["types", "subjects", "collections", "locations"]}
	/> -->
</Main>

<style lang="scss">
	.coming-soon {
		flex: 1;
		display: flex;
		align-items: flex-end;
		justify-content: flex-end;
		padding-block: calc(var(--spacer-400) * 1);
	}
</style>