---
import Main from "@layouts/Main.astro";
import { PublicationsListingGroqQuery } from "@lib/groq";
import sanityClient from "@root/sanity";
import type { PublicationProps } from "@publications/[slug].astro";
import Listing, { assignRecordToGroup, type DatasetRecordGroups } from "@components/Listing.astro";
import { LOCALES } from "@lib/locales";

export type PublicationsListingProps = {
	id: "publicationsListing";
	type: "listing";
	slug: { current: string; };
	title: string;
	allPublications: PublicationProps[];
};

export async function getStaticPaths() {
	const publicationsListing: PublicationsListingProps = await sanityClient.fetch(PublicationsListingGroqQuery);
	return [{
		params: {
			publications: publicationsListing?.slug.current,
		},
		props: {
			...publicationsListing,
		},
	}];
};

const listing = Astro.props;

const allPublications: DatasetRecordGroups = {};
const publicationsByType: DatasetRecordGroups = {};
const publicationsByCollection: DatasetRecordGroups = {};
const publicationsBySubject: DatasetRecordGroups = {};
const publicationsByLocation: DatasetRecordGroups = {};

listing.allPublications.forEach((publication) => {
	assignRecordToGroup(publication, {
		group: allPublications,
		key: "all",
		marker: "All",
		description: "All publications",
		method: "period",
	});
	publication.types && publication.types.length !== 0 && publication.types?.forEach((type) => assignRecordToGroup(publication, {
		group: publicationsByType,
		method: "types",
		key: type.slug.current,
		marker: type.name,
	}));
	publication.subjects && publication.subjects.length !== 0 && publication.subjects?.forEach((subject) => assignRecordToGroup(publication, {
		group: publicationsBySubject,
		method: "subjects",
		key: subject.slug.current,
		marker: subject.name,
	}));
	publication.collections && publication.collections.length !== 0 && publication.collections?.forEach((collection) => assignRecordToGroup(publication, {
		group: publicationsByCollection,
		method: "collections",
		key: collection.slug.current,
		marker: collection.name,
	}));
	publication.locations && publication.locations.length !== 0 && publication.locations?.forEach((location) => assignRecordToGroup(publication, {
		group: publicationsByLocation,
		method: "locations",
		key: location.locale,
		marker: LOCALES.find((locale) => location.locale === locale.value)?.title,
	}));
});
---

<Main title={listing.title}>
	<h1 class="display-none">
		{listing.title}
	</h1>
	<Listing
		source={allPublications}
		originalSet={listing.allPublications}
		keys={Object.keys(allPublications)}
		densities={["2"]}
		filters={{
			types: publicationsByType,
			subjects: publicationsBySubject,
			collections: publicationsByCollection,
			locations: publicationsByLocation,
		}}
	/>
</Main>