---
import Dataset, { assignRecordToGroup, type DatasetRecordGroups } from "@components/Dataset.astro";
import Main from "@layouts/Main.astro";
import { PublicationsListingGroqQuery } from "@lib/groq";
import { LOCALES } from "@lib/locales";
import type { CollectionProps, LocationProps, SanityImageMetadataObject, SubjectProps, TypeProps } from "@lib/types.astro";
import sanityClient from "@root/sanity";
import type { SanityImageObject } from "@sanity/image-url/lib/types/types";
import type { TypedObject } from "astro-portabletext/types";

export type PublicationsListingProps = {
	id: "publicationsListing";
	type: "listing";
	slug: { current: string; };
	title: string;
	allPublications: BasicPublicationProps[];
};

export type BasicPublicationProps = {
	type: "publication";
	slug: { current: string; };
	title: string;
	subtitle: string;
	date: string;
	locations?: LocationProps[];
	types: TypeProps[];
	subjects?: SubjectProps[];
	collections?: CollectionProps[];
	image: SanityImageObject & SanityImageMetadataObject;
	description: TypedObject[];
};

export async function getStaticPaths() {
	const publicationsListing: PublicationsListingProps = await sanityClient.fetch(PublicationsListingGroqQuery);
	return [{
		params: {
			publications: publicationsListing?.slug.current,
		},
		props: {
			...publicationsListing,
		},
	}];
};

const listing = Astro.props;

const allPublications: DatasetRecordGroups = {};
const publicationsByType: DatasetRecordGroups = {};
const publicationsByCollection: DatasetRecordGroups = {};
const publicationsBySubject: DatasetRecordGroups = {};
const publicationsByLocation: DatasetRecordGroups = {};

listing.allPublications.forEach((publication) => {
	assignRecordToGroup(publication, {
		group: allPublications,
		key: "all",
		title: "All",
		description: "All publications",
		method: "period",
	});
	publication.types && publication.types.length !== 0
		? publication.types?.forEach((type) => assignRecordToGroup(publication, {
			group: publicationsByType,
			key: type.slug.current,
			title: type.name,
			description: `${type.name?.trim()} publications`,
			method: "types",
		})) : assignRecordToGroup(publication, {
			group: publicationsByType,
			key: "other",
			title: "Other",
			description: "Other publications",
			method: "types",
		});
	publication.collections && publication.collections.length !== 0
		? publication.collections?.forEach((collection) => assignRecordToGroup(publication, {
			group: publicationsByCollection,
			key: collection.slug.current,
			title: collection.name,
			description: `Publications from ${collection.name?.trim()}`,
			method: "collections",
		})) : assignRecordToGroup(publication, {
			group: publicationsByCollection,
			key: "other",
			title: "Other",
			description: "Other publications",
			method: "collections",
		});
	publication.subjects && publication.subjects.length !== 0
		? publication.subjects?.forEach((subject) => assignRecordToGroup(publication, {
			group: publicationsBySubject,
			key: subject.slug.current,
			title: subject.name,
			description: `${subject.name?.trim()} publications`,
			method: "subjects",
		})) : assignRecordToGroup(publication, {
			group: publicationsBySubject,
			key: "other",
			title: "Other",
			description: "Other publications",
			method: "subjects",
		});
	publication.locations?.forEach((location) => assignRecordToGroup(publication, {
		group: publicationsByLocation,
		key: location.locale,
		title: LOCALES.find((locale) => location.locale === locale.value)?.title || location.locale,
		description: `Publications from ${LOCALES.find((locale) => location.locale === locale.value)?.title || location.locale}`,
		method: "locations",
	}));
});
---

<Main title={listing.title}>
	<h1 class="display-none">
		{listing.title}
	</h1>
	<Dataset
		sets={[
			{
				name: "set-1",
				method: "period",
				type: "covers",
				title: "List of Publications, Sorted by Date",
				object: allPublications,
				orderings: Object.keys(allPublications),
			},
		]}
		filters={[
			{
				type: "types",
				object: publicationsByType,
				orderings: Object.keys(publicationsByType)?.filter((key) => !["other"].includes(key))?.sort(),
				unfilteredSize: listing.allPublications?.length,
			},
			{
				type: "subjects",
				object: publicationsBySubject,
				orderings: Object.keys(publicationsBySubject)?.filter((key) => !["other"].includes(key))?.sort(),
				unfilteredSize: listing.allPublications?.length,
			},
			{
				type: "collections",
				object: publicationsByCollection,
				orderings: Object.keys(publicationsByCollection)?.filter((key) => !["other"].includes(key))?.sort(),
				unfilteredSize: listing.allPublications?.length,
			},
			{
				type: "locations",
				object: publicationsByLocation,
				orderings: Object.keys(publicationsByLocation)?.filter((key) => !["other"].includes(key))?.sort((a, b) => LOCALES.find((locale) => locale.value === a)?.title?.localeCompare(LOCALES.find((locale) => locale.value === b)?.title)),
				unfilteredSize: listing.allPublications?.length,
			},
		]}
	/>
</Main>