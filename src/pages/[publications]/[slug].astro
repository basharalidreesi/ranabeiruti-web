---
import Main from "@layouts/Main.astro";
import { PublicationsGroqQuery, PublicationsListingGroqQuery } from "@lib/groq";
import sanityClient from "@root/sanity";
import type { CollectionProps, LocationProps, SanityImageMetadataObject, SubjectProps, TypeProps } from "@lib/types.astro";
import type { SanityImageObject } from "@sanity/image-url/lib/types/types";
import type { TypedObject } from "astro-portabletext/types";
import Page, { type PageProps } from "@components/Page.astro";
import type { ProjectProps } from "@projects/[slug].astro";
import type { PublicationsListingProps } from "./index.astro";
import { portableTextToPlainText } from "@components/RichText.astro";

export type PublicationProps = {
	type: "publication";
	slug: { current: string; };
	title: string;
	subtitle?: string;
	date: string;
	types: TypeProps[];
	locations?: LocationProps[];
	subjects?: SubjectProps[];
	collections?: CollectionProps[];
	image: SanityImageObject & SanityImageMetadataObject;
	description?: TypedObject[] | string;
	credits?: TypedObject[];
	relatedProjects?: ProjectProps[];
	relatedPublications?: PublicationProps[];
	page: PageProps;
};

export async function getStaticPaths() {
	const publications: PublicationProps[] = await sanityClient.fetch(PublicationsGroqQuery);
	// const publications: PublicationProps[] = [];
	const publicationsListing: PublicationsListingProps = await sanityClient.fetch(PublicationsListingGroqQuery);
	return publications?.map((publication) => {
		return {
			params: {
				publications: publicationsListing.slug?.current,
				slug: publication.slug?.current,
			},
			props: {
				...publication,
			},
		};
	});
};

const publication = Astro.props;
---

<Main title={publication.title} description={portableTextToPlainText(publication.description)} image={{ url: publication.image.url, transformationQuery: `?w=1200&h=630&fit=crop&fp-x=${publication.image.hotspot?.x || 0.5}&fp-y=${publication.image.hotspot?.y || 0.5}&auto=format` }}>
	<Page source={publication} />
</Main>