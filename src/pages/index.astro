---
import Link from "@components/Link.astro";
import Main from "@layouts/Main.astro";
import { HomepageGroqQuery } from "@lib/groq";
import type { RecordProps, StoryProps } from "@lib/types.astro";
import sanityClient from "@root/sanity";
import RecordTitle from "@components/RecordTitle.astro";
import RecordImage from "@components/RecordImage.astro";
import RecordDate from "@components/RecordDate.astro";
import RecordDescription from "@components/RecordDescription.astro";
import RecordBody from "@components/RecordBody.astro";
import Page, { type PageProps } from "@components/Page.astro";

export type HomepageProps = {
	id: "homepage";
	type: "listing";
	slug: { current: "/"; };
	title: string;
	featuredItems: {
		item: Exclude<RecordProps, StoryProps>;
		displayMode: "expansive" | "constrained";
	}[];
	page: PageProps;
};

const homepage: HomepageProps = await sanityClient.fetch(HomepageGroqQuery);
---

<Main title={homepage.title} headerMode={homepage.featuredItems && homepage.featuredItems.length !== 0 ? "clear" : null} clearHeaderColor={homepage.featuredItems && homepage.featuredItems.length !== 0 ? homepage.featuredItems[0].item?.image?.metadata?.palette?.darkMuted?.title : null}>
	<h1 class="display-none">
		{homepage.title}
	</h1>
	{homepage.featuredItems && homepage.featuredItems.length !== 0 && (
		<section class="featured-items">
			<h2 class="display-none">Featured Items</h2>
			<div class="featured-items-carousel">
				{homepage.featuredItems.map((featuredItem) => (
					<article
						class="featured-item"
						data-type={featuredItem.item.type}
						data-has-image={featuredItem.item.image && featuredItem.item.image.asset ? "true" : "false"}
						data-display={featuredItem.displayMode}
						style={{
							"--title-color": featuredItem.item.image && featuredItem.displayMode === "expansive" && featuredItem.item.image.metadata?.palette?.darkMuted?.title,
							"--background-color": featuredItem.item.image && featuredItem.displayMode === "expansive" && featuredItem.item.image.metadata?.palette?.darkMuted?.background,
							"--image-aspect-ratio": featuredItem.item.image && featuredItem.displayMode === "constrained" && featuredItem.item.image.metadata?.dimensions?.aspectRatio,
						}}
					>
						{featuredItem.item.image && featuredItem.item.image.asset ? (
							<RecordTitle source={featuredItem.item} level={3} withLink={true} />
							<Link class="record-image-link" to={featuredItem.displayMode === "constrained" && featuredItem.item}>
								<RecordImage source={featuredItem.item} sizes={featuredItem.displayMode === "constrained" ? "100vw" : "200vw"} />
							</Link>
						) : (
							<div class="featured-item-inner">
								<RecordTitle source={featuredItem.item} level={3} withLink={true} />
								<RecordDate source={featuredItem.item} />
								<RecordDescription source={featuredItem.item} />
								<RecordBody source={featuredItem.item} />
							</div>
						)}
					</article>
				))}
			</div>
			{homepage.featuredItems.length > 1 && (
				<div class="featured-items-seekers" style={{ "--image-title-color": homepage.featuredItems[0].item?.image?.metadata?.palette?.darkMuted?.title || null }}>
					<div class="featured-items-previous">
						<button name="seek" value="previous" title="Previous">Previous</button>
						<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
							<title>Previous</title>
							<line x1="24" y1="12" x2="0" y2="12"></line>
							<polyline points="8.49,3.51 0,12 8.49,20.49"></polyline>
						</svg>
					</div>
					<div class="featured-items-next">
						<button name="seek" value="next" title="Next">Next</button>
						<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
							<title>Next</title>
							<line x1="0" y1="12" x2="24" y2="12"></line>
							<polyline points="15.51,20.49 24,12 15.51,3.51"></polyline>
						</svg>
					</div>
				</div>
			)}
			{homepage.page && homepage.page.body && homepage.page.body.length !== 0 && (
				<div class="featured-items-down" style={{ "--image-title-color": homepage.featuredItems[0].item?.image?.metadata?.palette?.darkMuted?.title || null }}>
					<button name="seek" value="down" title="Down">Down</button>
					<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
						<title>Previous</title>
						<line x1="12" y1="0" x2="12" y2="24"></line>
						<polyline points="3.5,15.5 12,24 20.5,15.5 "></polyline>
					</svg>
				</div>
			)}
		</section>
	)}
	{homepage.page && homepage.page.body && homepage.page.body.length !== 0 && (
		<Page source={homepage} />
	)}
</Main>

<style lang="scss" is:global>
	@use "@styles/mixins";
	.featured-items {
		position: relative;
		margin-inline: calc(var(--body-inline-spacing) * -1);
		margin-block-start: calc((var(--header-height) + var(--header-offset)) * -1);
		height: 100vh;
		height: 100svh;
	}
	.featured-items::before {
		content: "";
		position: absolute;
		inset: 0;
		box-shadow: 0 0 calc(var(--spacer-400) * 2) var(--color-5);
	}
	.featured-items-carousel {
		display: flex;
		align-items: flex-start;
		justify-content: flex-start;
		height: 100%;
		overflow-x: auto;
		scroll-snap-type: x mandatory;
		scroll-snap-stop: always;
		scroll-behavior: smooth;
		@include mixins.no-scrollbar();
	}
	.featured-items-seekers {
		position: absolute;
		left: 0;
		right: 0;
		top: 50%;
		transform: translateY(-50%);
		display: flex;
		align-items: center;
		justify-content: space-between;
		height: var(--header-height);
		padding-inline: var(--body-inline-spacing);
		pointer-events: none;
		z-index: 50;
		color: var(--color-1);
		color: var(--image-title-color);
		transition: color 0.125s;
	}
	.featured-items-previous,
	.featured-items-next {
		& {
			position: relative;
			height: 100%;
			display: flex;
			align-items: center;
			pointer-events: all;
			@include mixins.hover-text($withOpacity: true, $opacity: 0.583);
		}
		button {
			all: unset;
			position: absolute;
			inset: calc(var(--spacer-400) * -1);
			opacity: 0;
			cursor: pointer;
			z-index: 1;
			font-size: 0px;
		}
		svg {
			display: block;
			width: calc(1em + var(--spacer-50) + var(--spacer-100) * 2);
			height: calc(1em + var(--spacer-50) + var(--spacer-100) * 2);
			padding: var(--spacer-100);
			border-radius: 100%;
			border: 1px solid currentColor;
			fill: transparent;
			stroke: currentColor;
			stroke-width: 1.1px;
			overflow: visible;
			stroke-linejoin: round;
			stroke-linecap: round;
			cursor: pointer;
			* {
				vector-effect: non-scaling-stroke;
			}
		}
	}
	.featured-items-down {
		& {
			position: absolute;
			bottom: 0;
			right: 0;
			padding-block-start: var(--spacer-400);
			padding-block-end: calc(var(--spacer-400) + env(safe-area-inset-bottom, 0px));
			padding-inline-start: calc(var(--spacer-400) + var(--spacer-100));
			padding-inline-end: calc(var(--body-inline-spacing) + var(--spacer-100));
			z-index: 50;
			color: var(--color-1);
			color: var(--image-title-color);
			@include mixins.hover-text($withOpacity: true, $opacity: 0.666);
			@media (max-width: 640px) {
				padding-block-start: calc((var(--header-height) - 1em) / 2);
				padding-block-end: calc(((var(--header-height) - 1em) / 2) + env(safe-area-inset-bottom, 0px));
			}
		}
		button {
			all: unset;
			position: absolute;
			inset: 0;
			opacity: 0;
			cursor: pointer;
			z-index: 1;
			font-size: 0px;
		}
		svg {
			display: block;
			width: calc(1em + var(--spacer-50));
			height: calc(1em + var(--spacer-50));
			margin-inline: auto;
			fill: transparent;
			stroke: currentColor;
			stroke-width: 1.2px;
			overflow: visible;
			stroke-linejoin: round;
			stroke-linecap: round;
			cursor: pointer;
			* {
				vector-effect: non-scaling-stroke;
			}
		}
	}
	.featured-item {
		position: relative;
		flex: 0 0 100%;
		height: 100%;
		scroll-snap-align: center;
		&[data-has-image="true"][data-display="constrained"] {
			display: flex;
			flex-direction: column;
			row-gap: var(--spacer-400);
			padding-inline: var(--body-inline-spacing);
			padding-block-start: calc(var(--header-height) + var(--header-offset));
			padding-block-end: calc(var(--spacer-400) + env(safe-area-inset-bottom, 0px));
			background: var(--color-7);
		}
		&[data-has-image="false"] {
			display: flex;
			align-items: center;
			justify-content: center;
			padding-block-start: calc(var(--header-height) + var(--header-offset));
			padding-block-end: calc(var(--header-height) + var(--header-offset) + env(safe-area-inset-bottom, 0px));
		}
		&[data-has-image="false"] {
			margin-inline: var(--spacer-400);
			& + [data-has-image="true"][data-display="constrained"],
			& + [data-has-image="false"] {
				margin-inline-start: 0;
			}
			&:last-of-type {
				margin-inline-end: 0;
			}
			@include mixins.polka-dot-background();
		}
	}
	.record-image-link {
		display: contents;
	}
	.record-image {
		.featured-item[data-has-image="true"][data-display="expansive"] & {
			&,
			picture,
			img {
				width: 100%;
				height: 100%;
			}
			&::before {
				content: "";
				position: absolute;
				left: 0;
				right: 0;
				display: block;
				height: calc(var(--header-height) + var(--header-offset) + var(--spacer-400));
				background: linear-gradient(to bottom, var(--background-color) var(--header-offset), transparent);
				opacity: 0.333;
			}
			&::before {
				top: 0;
			}
		}
		.featured-item[data-has-image="true"][data-display="constrained"] & {
			& {
				order: 1;
				width: fit-content;
				height: fit-content;
				max-width: 100%;
				max-height: 100%;
				min-width: 0;
				min-height: 0;
				margin: auto;
			}
			picture,
			img {
				width: auto;
				max-width: 100%;
				height: 100%;
			}
			picture {
				background-size: contain;
			}
			img {
				object-fit: contain;
			}
		}
	}
	.record-title {
		.featured-item[data-has-image="true"] & {
			& {
				line-height: 1.3;
				text-wrap: pretty;
				text-wrap: balance;
			}
			.record-title-baseline {
				font-weight: 700;
			}
			h3 {
				width: fit-content;
				max-width: calc(100% - 1em - var(--spacer-50) - var(--spacer-100) - var(--spacer-100) - var(--spacer-400));
			}
			a {
				display: block;
			}
		}
		.featured-item[data-has-image="true"]:not([data-type="press"]) & {
			.record-title-separator {
				position: absolute;
				opacity: 0;
				font-size: 0px;
			}
			.record-subtitle {
				display: block;
			}
		}
		.featured-item[data-has-image="true"][data-display="expansive"] & {
			& {
				position: absolute;
				bottom: calc(var(--spacer-400) + env(safe-area-inset-bottom, 0px));
				left: var(--body-inline-spacing);
				right: var(--body-inline-spacing);
				color: var(--title-color);
			}
			h3 {
				position: relative;
				z-index: 1;
			}
			a {
				@include mixins.hover-text($withOpacity: true, $opacity: 0.666);
			}
			&::before {
				content: "";
				position: absolute;
				bottom: calc((var(--spacer-400) + env(safe-area-inset-bottom, 0px)) * -1);
				top: calc(var(--spacer-400) * -2);
				left: calc(var(--body-inline-spacing) * -1);
				right: calc(var(--body-inline-spacing) * -1);
				background: linear-gradient(to top, var(--background-color) var(--header-offset), transparent);
				opacity: 0.333;
			}
		}
		.featured-item[data-has-image="true"][data-display="constrained"] & {
			& {
				order: 2;
			}
			a {
				@include mixins.hover-text($withOpacity: true, $opacity: 0.5);
			}
		}
	}
	.featured-item-inner {
		& {
			position: relative;
			display: flex;
			flex-flow: column;
			row-gap: var(--spacer-100);
			padding: var(--spacer-400);
			background: var(--color-7);
			max-width: 70ch;
			min-width: 0;
			min-height: 0;
			line-height: 1.3;
			text-wrap: pretty;
			text-wrap: balance;
		}
		.record-date {
			order: 1;
		}
		.record-title {
			& {
				order: 2;
				font-size: var(--font-size-700);
			}
			.record-title-baseline {
				font-weight: 700;
			}
			.featured-item:not([data-type="news"]):not([data-type="press"]) & {
				.record-title-separator {
					position: absolute;
					opacity: 0;
					font-size: 0px;
				}
				.record-subtitle {
					display: block;
					margin-block-start: var(--spacer-50);
				}
			}
			a::after {
				content: "";
				position: absolute;
				inset: 0;
				z-index: 1;
			}
		}
		.record-description,
		.record-body {
			order: 3;
			@include mixins.ellipsis-multiline($lines: 3);
		}
	}
</style>

<script>
	const header: HTMLElement = document.querySelector("header");
	const featuredItems: NodeListOf<HTMLElement> = document.querySelectorAll(".featured-item");
	const seekerButtonsContainer: HTMLElement = document.querySelector(".featured-items-seekers");
	const seekDownButtonContainer: HTMLElement = document.querySelector(".featured-items-down");

	var currentIntersection: Element = null;
	function observeFeaturedItemIntersections() {
		const observer = new IntersectionObserver((entries) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					currentIntersection = entry.target;
					const titleColor = window.getComputedStyle(entry.target).getPropertyValue("--title-color");
					entry.target.setAttribute("aria-current", "location");
					header.style.setProperty("--clear-header-color", titleColor ? titleColor : null);
					seekerButtonsContainer.style.setProperty("--image-title-color", titleColor ? titleColor : null);
					seekDownButtonContainer.style.setProperty("--image-title-color", titleColor ? titleColor : null);
				} else {
					entry.target.removeAttribute("aria-current");
				}
			});
		}, {
			root: null,
			rootMargin: "0px -50% 0px -50%"
		});
		featuredItems?.forEach((featuredItem) => {
			observer.observe(featuredItem);
		});
	};
	observeFeaturedItemIntersections();

	const featuredItemsCarousel: HTMLElement = document.querySelector(".featured-items-carousel");
	const seekButtons: NodeListOf<HTMLButtonElement> = document.querySelectorAll(`button[name="seek"]`);
	const page: HTMLElement = document.querySelector(".page");
	seekButtons?.forEach((seekButton) => {
		const direction = seekButton.getAttribute("value");
		const intent =
			direction === "next" ? 1
			: direction === "previous" ? -1
			: direction === "down" ? -2
			: 0;
		seekButton.addEventListener("click", () => {
			handleSeek(intent);
		});
	});
	function handleSeek(direction: -2 | -1 | 1 | 0) {
		if (direction === -1 && currentIntersection === featuredItems[0]) {
			return featuredItemsCarousel.scrollLeft = featuredItemsCarousel.scrollWidth - featuredItemsCarousel.getBoundingClientRect().width;
		};
		if (direction === 1 && currentIntersection === featuredItems[featuredItems.length - 1]) {
			return featuredItemsCarousel.scrollLeft = 0;
		};
		if (direction === -1) {
			featuredItemsCarousel.scrollLeft = (currentIntersection.previousElementSibling as HTMLElement).offsetLeft;
		} else if (direction === 1) {
			featuredItemsCarousel.scrollLeft = (currentIntersection.nextElementSibling as HTMLElement).offsetLeft;
		};
		if (direction === -2) {
			window.scrollTo({
				top: page.offsetTop + 1,
			});
		};
		return;
	};

	// to be used if indicators are added (i.e. the ability to navigate to a specific featuredItem)
	// function seekTo(index: number) {
	// 	featuredItemsCarousel.scrollLeft = (featuredItemsCarousel.children[index - 1] as HTMLElement).offsetLeft;
	// };

	function observeCarouselIntersections() {
		const observer = new IntersectionObserver(([entry]) => {
			if (entry.isIntersecting) {
				header.setAttribute("data-mode", "clear");
			} else {
				header.setAttribute("data-mode", "contrast");
			};
		}, {
			root: null,
			rootMargin: "100% 0px 100% 0px",
			threshold: 1,
		});
		featuredItemsCarousel && observer.observe(featuredItemsCarousel);
	};
	observeCarouselIntersections();
</script>