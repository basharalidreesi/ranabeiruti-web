---
import sanityClient from "@root/sanity";
import Main from "../layouts/Main.astro";
import { ProjectsListingGroqQuery } from "@lib/groq";
import type { ProjectsListingProps } from "@lib/types";
import Link from "@components/Link.astro";

const listing: ProjectsListingProps = await sanityClient.fetch(ProjectsListingGroqQuery);
---

<Main title="Home">
	<h1>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris non arcu nulla. Nulla interdum ultrices commodo.</h1>
	<div class="img">
		<img src="https://cdn.sanity.io/images/rtlbcvty/production/a7e9bea436f1f1a66e01acc164fc83100f66a623-1280x720.jpg?fm=webp" />
		<p>
			<a class="hover-text" href="/projects/">
				Browse Projects
			</a>
		</p>
	</div>
	<aside id="controls" class="fss">
		<div id="quicklink-controls">
			{listing.quicklinks && listing.quicklinks.length !== 0 && (listing.quicklinks?.map((group, outerIndex) => (
				<fieldset class="quicklink-group" id={`quicklink-group-${outerIndex}`} data-expanded="false">
					<legend>{group.title}</legend>
					<ul>
						{group.items.map((item, innerIndex) => {
							return [
								innerIndex === 3 && group.items.length > 4 ? (
									<li class="more toe">
										<button class="checkbox hover-text" name="expand-quicklink-group" aria-expanded="false" aria-controls={`quicklink-group-${outerIndex}`} aria-label="Expand">{group.items.length - innerIndex} more</button>
									</li>
								) : null,
								item._type === "linkToItem" ? (
									<li class="toe">
										<Link class="hover-text" href={`/${listing.slug.current}/${item.slug.current}/`}>
											{item.title}
										</Link>
									</li>
								) : item._type === "filterByTag" ? (
									<li class="toe">
										<Link class="hover-text" href={`?${item.schemaType}=${item.slug.current}`}>
											{item.name}
										</Link>
									</li>
								) : item._type === "filterByDate" ? (
									<li class="toe">
										<Link class="hover-text" href={`?period=${item.year}`}>
											{item.year}
										</Link>
									</li>
								) : item._type === "customFilter" ? (
									<li class="toe">
										<Link class="hover-text" href={`?${item.tags.map((tag) => `${tag.schemaType?.replaceAll("_", "")}=${tag.slug.current}`).join("&")}`}>
											{item.label}
										</Link>
									</li>
								) : null,
							];
						})}
					</ul>
				</fieldset>
			)))}
		</div>
	</aside>
</Main>

<style lang="scss">
	:root {
		--_columns: [all-start] var(--_breakout) [content-start] 1fr [content-end] 0 [all-end];
		--_breakout: calc(15% + 1.5rem);
		@media (max-width: 896px) {
			--_breakout: 0;
		}
	}
	* {
		min-width: 0;
		min-height: 0;
	}
	fieldset {
		border: none;
	}
	legend {
		display: block;
		width: 100%;
		margin-block-end: 0.75rem;
		color: var(--color-2);
	}
	ul {
		list-style: none;
	}
	li {
		font-size: var(--font-size-medium);
	}
	h1 {
		font-size: 2rem;
		font-weight: bold;
		line-height: 1.3;
		padding-block: 1.5rem;
	}
	#controls {
		font-size: var(--font-size-medium);
	}
	// #controls {
	// 	& {
	// 		padding-block: 1.5rem;
	// 		font-size: var(--font-size-medium);
	// 		display: grid;
	// 		grid-template-columns: var(--_columns);
	// 	}
	// 	& > * {
	// 		grid-column: content;
	// 	}
	// 	& > * + * {
	// 		margin-block-start: 0.75rem;
	// 		padding-block-start: 0.75rem;
	// 		border-block-start: 1px solid var(--color-text-xx-light);
	// 	}
	// 	& > *:last-child {
	// 		padding-block-end: 0.75rem;
	// 		border-block-end: 1px solid var(--color-text-xx-light);
	// 	}
	// 	.control-group {
	// 		display: flex;
	// 		flex-wrap: wrap;
	// 		column-gap: 1.5rem;
	// 		row-gap: 0.75rem;
	// 	}
	// }
	#controls {
		margin-bottom: 1.5rem;
	}
	.img {
		padding-block-end: 1.5rem;
		position: relative;
		img {
			display: block;
			width: 100%;
			height: auto;
		}
		a {
			position: absolute;
			top: 80%;
			left: 50%;
			transform: translate(-50%, -50%);
			text-align: center;
			text-wrap: balance;
			display: block;
			padding: 0.75rem;
			background-color: white;
			font-size: 2rem;
			font-weight: bold;
		}
	}
	#quicklink-controls {
		& {
			display: flex;
			flex-wrap: wrap;
			column-gap: 1.5rem;
			row-gap: 0.75rem;
		}
		.quicklink-group {
			--_columns: 5;
			flex-basis: calc((100% - (1.5rem * (var(--_columns) - 1))) / var(--_columns));
			@media (max-width: 1152px) {
				--_columns: 4;
			}
			@media (max-width: 896px) {
				--_columns: 3;
			}
			@media (max-width: 640px) {
				--_columns: 2;
			}
		}
		legend {
			margin-block-end: 0.5rem;
		}
		li {
			padding-block: 0.25rem;
		}
		li:not(.more)::before {
			content: "â€¢";
			display: inline-block;
			width: 0.75rem;
			height: 0.75rem;
			line-height: 0.75;
			margin-right: 0.25rem;
			margin-bottom: -1px;
			text-align: center;
			font-family: monospace;
			color: var(--color-2);
		}
		button {
			appearance: unset;
			background: none;
			border: none;
			display: block;
			cursor: pointer;
		}
		.quicklink-group[data-expanded="true"] {
			.more {
				display: none;
			}
		}
		.quicklink-group:not([data-expanded="true"]) {
			.more ~ li {
				display: none;
			}
		}
	}
</style>

<script>
	const expandQuicklinkGroupButtons = document.querySelectorAll(`button[name="expand-quicklink-group"]`);
	expandQuicklinkGroupButtons.forEach((button) => {
		button.addEventListener("click", handleExpandButtonClick);
	});
	function handleExpandButtonClick(event: Event) {
		const target = event.target as HTMLButtonElement;
		const closestQuicklinkGroup = target.closest(".quicklink-group");
		if (target.getAttribute("aria-expanded") === "false") {
			closestQuicklinkGroup.setAttribute("data-expanded", "true");
			target.setAttribute("aria-expanded", "true");
		} else {
			closestQuicklinkGroup.setAttribute("data-expanded", "false");
			target.setAttribute("aria-expanded", "false");
		};
	};
</script>