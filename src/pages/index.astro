---
import Image from "@components/Image.astro";
import Link from "@components/Link.astro";
import Main from "@layouts/Main.astro";
import { HomepageGroqQuery } from "@lib/groq";
import type { RecordProps, SanityImageMetadataObject } from "@lib/types.astro";
import type { SanityImageObject } from "@sanity/image-url/lib/types/types";
import sanityClient from "@root/sanity";
import SimpleDate from "@components/SimpleDate.astro";
import TitleAndSubtitle, { separatorsByType } from "@components/TitleAndSubtitle.astro";

export type HomepageProps = {
	id: "homepage";
	type: "listing";
	title: string;
	featuredItems: {
		item: RecordProps;
		displayMode: "expansive" | "constrained";
		image?: SanityImageObject & SanityImageMetadataObject;
	}[];
};

const homepage: HomepageProps = await sanityClient.fetch(HomepageGroqQuery);
---

<Main title={homepage.title} headerMode="overlay">
	{homepage.featuredItems && homepage.featuredItems.length !== 0 && (<>
		<section id="featured-items" aria-label="Featured Items">
			<h1 class="display-none">Featured Items</h1>
			{homepage.featuredItems.map((featuredItem, index, array) => (
				<article class="featured-item" data-type={featuredItem.item.type} data-mode={featuredItem.displayMode || "expansive"} data-has-image={featuredItem.image && featuredItem.image.asset ? "true" : "false"} data-index={index} data-is-first={index === 0 ? "true" : "false"} data-is-last={index === array.length - 1 ? "true" : "false"} style={{
					"--color-media": featuredItem.displayMode === "expansive" && featuredItem.image?.metadata?.palette?.darkMuted?.background || null,
					"--color-title": featuredItem.displayMode === "expansive" && featuredItem.image?.metadata?.palette?.darkMuted?.title || "var(--color-1)",
				}}>
					<header class="featured-item-header">
						<h2 class="featured-item-title">
							{(featuredItem.item.type === "news" || featuredItem.item.type === "press") && featuredItem.item.date && (
								<div class="featured-item-date">
									<SimpleDate source={featuredItem.item.date} length="long" />
								</div>
							)}
							<Link to={featuredItem.item}>
								<TitleAndSubtitle
									classPrefix="featured-item"
									title={featuredItem.item.title}
									subtitle={
										featuredItem.item.type === "project" ? featuredItem.item.subtitle
										: featuredItem.item.type === "publication" ? featuredItem.item.subtitle
										: featuredItem.item.type === "news" ? null
										: featuredItem.item.type === "press" ? featuredItem.item.publisher
										: null
									}
									separator={separatorsByType[featuredItem.item.type]}
								/>
							</Link>
						</h2>
						<div class="featured-item-cta">
							<Link to={
								featuredItem.item.type === "project" ? "projectsListing"
								: featuredItem.item.type === "publication" ? "publicationsListing"
								: featuredItem.item.type === "news" ? "pressListing"
								: featuredItem.item.type === "press" ? "pressListing"
								: null
							}>Browse {
								featuredItem.item.type === "project" ? "projects"
								: featuredItem.item.type === "publication" ? "publications"
								: featuredItem.item.type === "news" ? "news"
								: featuredItem.item.type === "press" ? "press"
								: null
							}</Link>
						</div>
					</header>
					{featuredItem.image && featuredItem.image.asset && (<>
						{featuredItem.displayMode === "constrained"
							? (
								<Link class="featured-item-image-link" to={featuredItem.item}>
									<Image class="featured-item-image" source={featuredItem.image} sizes="200vw" />
								</Link>
							)
							: (
								<Image class="featured-item-image" source={featuredItem.image} sizes="200vw" />
							)
						}
					</>)}
				</article>
			))}
		</section>
		{homepage.featuredItems.length > 1 && (
			<div id="controls" role="presentation">
				<button id="previous" data-direction="previous">
					<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
						<title>Previous</title>
						<line x1="24" y1="12" x2="0" y2="12"></line>
						<polyline points="8.49,3.51 0,12 8.49,20.49"></polyline>
					</svg>
				</button>
				<button id="next" data-direction="next">
					<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
						<title>Next</title>
						<line x1="0" y1="12" x2="24" y2="12"></line>
						<polyline points="15.51,20.49 24,12 15.51,3.51"></polyline>
					</svg>
				</button>
			</div>
		)}
	</>)}
</Main>

<style lang="scss" is:global>
	@use "@styles/mixins";
	#featured-items {
		position: absolute;
		inset: 0;
		display: flex;
		overflow-x: auto;
		scroll-snap-type: x mandatory;
		scroll-snap-stop: always;
		scroll-behavior: smooth;
		scrollbar-width: none; /* Firefox */
		-ms-overflow-style: none;  /* Internet Explorer 10+ */
		&::-webkit-scrollbar { /* WebKit */
			width: 0;
			height: 0;
		}
	}
	.featured-item {
		position: relative;
		flex: 0 0 auto;
		width: 100%;
		scroll-snap-align: center;
		overflow: hidden;
	}
	.featured-item::after {
		content: "";
		position: absolute;
		inset: 0;
		display: block;
		height: calc(var(--header-height) + 1.5rem + 1.5rem + 1.5rem);
		background: linear-gradient(to bottom, var(--color-media), transparent);
		opacity: 0.5;
		pointer-events: none;
	}
	.featured-item-cta {
		text-align: end;
		position: relative;
		padding-block: 0.25rem;
		padding-inline: 0.75rem;
		border-radius: 9999px;
		// min-width: 0;
		// white-space: nowrap;
		// overflow: hidden;
		// text-overflow: ellipsis;
		&::before {
			content: "";
			position: absolute;
			inset: 0;
			display: block;
			border: 1px solid currentColor;
			border-radius: 9999px;
			-webkit-backdrop-filter: blur(1.5rem);
			backdrop-filter: blur(1.5rem);
			opacity: 0.75;
			transition: opacity 0.125s;
		}
		@media (any-hover: hover) {
			&:hover::before {
				opacity: 1;
			}
		}
	}
	.featured-item-cta > a {
		position: relative;
	}
	.featured-item-cta > a::after {
		content: "";
		position: absolute;
		left: calc(-0.75rem - 1px);
		right: calc(-0.75rem - 1px);
		top: calc(-0.25rem - 1px);
		bottom: calc(-0.25rem - 1px);
		display: block;
		border-radius: 9999px;
	}
	.featured-item-image-link {
		display: contents;
	}
	.featured-item[data-mode="expansive"] {
		padding: 0;
	}
	.featured-item[data-mode="constrained"],
	.featured-item[data-has-image="false"] {
		padding-inline: calc(1.5rem + env(safe-area-inset-left, 0px));
		padding-block: calc(var(--header-height) + 1.5rem);
	}
	.featured-item[data-has-image="true"] {
		.featured-item-header {
			position: absolute;
			bottom: 0;
			left: 0;
			right: 0;
			display: flex;
			align-items: flex-end;
			justify-content: space-between;
			column-gap: calc(1.5rem * 2);
			padding-block: 1.5rem;
			padding-inline: calc(1.5rem + env(safe-area-inset-left, 0px));
			font-size: var(--font-size-medium);
			color: var(--color-title);
			& > * {
				position: relative;
			}
			@media (max-width: 640px) {
				column-gap: 1.5rem;
			}
		}
		.featured-item-header::before {
			content: "";
			position: absolute;
			inset: 0;
			top: calc(1.5rem * -2);
			display: block;
			background: linear-gradient(to top, var(--color-media), transparent);
			opacity: 0.5;
			pointer-events: none;
		}
		.featured-item-date {
			display: none;
		}
		.featured-item-title {
			flex: 1;
			text-wrap: balance;
			margin-block: 0.25rem;
		}
		.featured-item-title > a::after {
			// content: "";
			// position: absolute;
			// bottom: -1.5rem;
			// left: -1.5rem;
			// height: 100vh;
			// height: 100dvh;
			// width: 100vw;
			// width: 100dvw;
		}
		.featured-item-title-baseline {
			font-weight: var(--font-weight-bold);
		}
		.featured-item-image {
			width: 100%;
			height: 100%;
		}
		.featured-item-image img {
			display: block;
			width: 100%;
			height: 100%;
			object-fit: cover;
		}
		&[data-mode="constrained"] {
			.featured-item-image {
				background-size: contain;
				width: fit-content;
				margin: auto;
				max-width: 100%;
			}
			.featured-item-image img {
				object-fit: contain;
			}
		}
	}
	.featured-item[data-has-image="false"] {
		@include mixins.polka-dot-background();
		.featured-item-header {
			width: 100%;
			height: 100%;
			display: flex;
			align-items: center;
			justify-content: center;
		}
		.featured-item-title {
			position: relative;
			padding: 1.5rem;
			max-width: 50ch;
			line-height: var(--line-height-medium);
			background: var(--color-7);
			// text-shadow: -2px -2px 0 var(--color-7), 2px -2px 0 var(--color-7), -2px 2px 0 var(--color-7), 2px 2px 0 var(--color-7);
		}
		.featured-item-title > a::after {
			content: "";
			position: absolute;
			inset: 0;
		}
		.featured-item-date {
			display: block;
			margin-block-end: 0.75rem;
			font-size: var(--font-size-small);
			color: var(--color-2);
		}
		.featured-item-title-baseline {
			font-size: var(--font-size-x-large);
			font-weight: var(--font-weight-bold);
			letter-spacing: -0.02em;
		}
		.featured-item-title-separator {
			opacity: 0;
			position: absolute;
		}
		.featured-item-subtitle {
			display: block;
			margin-block-start: 0.75rem;
			font-size: var(--font-size-large);
			display: flex;
			column-gap: 0.75rem;
			&::before {
				content: "â†’";
				line-height: 1;
			}
		}
		.featured-item-cta {
			position: absolute;
			bottom: 1.5rem;
			right: 1.5rem;
			max-width: calc(100% - 1.5rem - 1.5rem);
			font-size: var(--font-size-medium);
		}
	}
	#controls {
		position: absolute;
		top: 50%;
		left: 0;
		right: 0;
		display: flex;
		justify-content: space-between;
		margin-inline: calc(1.5rem + 1.5rem + env(safe-area-inset-left, 0px));
		transform: translateY(-50%);
		pointer-events: none;
		// transition: color 0.125s;
		--_bg: transparent;
	}
	#previous,
	#next {
		all: unset;
		position: relative;
		width: 1rem;
		height: 1rem;
		flex-shrink: 0;
		flex-grow: 0;
		padding: 0.5rem;
		border-radius: 100%;
		pointer-events: auto;
		cursor: pointer;
		&::before {
			content: "";
			position: absolute;
			inset: 0;
			display: block;
			border: 1px solid currentColor;
			border-radius: 100%;
			-webkit-backdrop-filter: blur(1.5rem);
			backdrop-filter: blur(1.5rem);
			opacity: var(--_op, 0.75);
			transition: opacity 0.125s; /**  background-color 0.125s; */
			background: var(--_bg);
		}
		&::after {
			content: "";
			display: block;
			position: absolute;
			left: -1.5rem;
			right: -1.5rem;
			top: calc(1.5rem * -3);
			bottom: calc(1.5rem * -3);
		}
		@media (any-hover: hover) {
			&:hover::before {
				opacity: 1;
			}
		}
		svg {
			position: relative;
			display: block;
			width: 100%;
			height: 100%;
			fill: transparent;
			stroke: currentColor;
			stroke-width: 1px;
			overflow: visible;
		}
		svg * {
			vector-effect: non-scaling-stroke;
		}
	}
	#previous::after {
		left: calc(1.5rem * -2);
	}
	#next::after {
		right: calc(1.5rem * -2);
	}
</style>

<script>
	const header: HTMLElement = document.querySelector("#header-outer");
	const carousel: HTMLElement = document.querySelector("#featured-items");
	const carouselItems: NodeListOf<HTMLElement> = document.querySelectorAll(".featured-item");
	const controls: HTMLElement = document.querySelector("#controls");
	const previousAndNext: NodeListOf<HTMLButtonElement> = document.querySelectorAll("#previous, #next");

	var currentIntersection: Element = null;

	function observeIntersections() {
		let observer = new IntersectionObserver((entries) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					currentIntersection = entry.target;
					const titleColor = getComputedStyle(entry.target).getPropertyValue("--color-title");
					const imageColor = getComputedStyle(entry.target).getPropertyValue("--color-media");
					entry.target.setAttribute("aria-current", "location");
					header.style.setProperty("color", titleColor ? titleColor : null);
					controls && controls.style.setProperty("color", titleColor ? titleColor : null);
					controls && controls.style.setProperty("--color-media", imageColor ? imageColor : null);
					if (currentIntersection.getAttribute("data-has-image") === "false" || currentIntersection.getAttribute("data-mode") === "constrained") {
						controls && controls.style.setProperty("--_bg", "var(--color-7)");
						controls && controls.style.setProperty("--_op", "0.5");
					} else {
						controls && controls.style.removeProperty("--_bg");
						controls && controls.style.removeProperty("--_op");
					};
				} else {
					entry.target.removeAttribute("aria-current");
				}
			});
		}, {
			root: null,
			rootMargin: "0px -50% 0px -50%"
		});
		carouselItems.forEach((carouselItem) => {
			observer.observe(carouselItem);
		});
	};

	observeIntersections();

	function seek(direction: -1 | 1 | 0) {
		if (direction === -1 && currentIntersection.getAttribute("data-is-first") === "true") {
			carousel.scrollLeft = carousel.scrollWidth - carousel.getBoundingClientRect().width;
			return;
		};
		if (direction === 1 && currentIntersection.getAttribute("data-is-last") === "true") {
			carousel.scrollLeft = 0;
			return;
		};
		if (direction === -1) {
			carousel.scrollLeft = (currentIntersection.previousElementSibling as HTMLElement).offsetLeft;
		} else if (direction === 1) {
			carousel.scrollLeft = (currentIntersection.nextElementSibling as HTMLElement).offsetLeft;
		};
		return;
	};

	previousAndNext && previousAndNext.forEach((control) => {
		const direction = control.getAttribute("data-direction");
		const intent = direction === "next" ? 1 : direction === "previous" ? -1 : 0;
		control.addEventListener("click", () => {
			seek(intent);
		});
	});

	// to be used if indicators are added (i.e. the ability to navigate to a specific carouselItem)
	//
	// function seekTo(index: number) {
	// 	carousel.scrollLeft = (carousel.children[index - 1] as HTMLElement).offsetLeft;
	// };
</script>