---
import Image from "@components/Image.astro";
import Link from "@components/Link.astro";
import Main from "@layouts/Main.astro";
import { HomepageGroqQuery } from "@lib/groq";
import type { SanityImageMetadataObject } from "@lib/types";
import type { SanityImageObject } from "@sanity/image-url/lib/types/types";
import sanityClient from "@root/sanity";

export type HomepageProps = {
	slug: {
		current: "/";
	};
	baseUrls: {
		projectsListingBaseUrl: string;
	};
	title: string;
	featuredProjects: {
		project: {
			slug: {
				current: string;
			};
			title: string;
			subtitle: string;
		};
		image: SanityImageObject & SanityImageMetadataObject;
	}[];
};

const homepage: HomepageProps = await sanityClient.fetch(HomepageGroqQuery);
---

<Main title={homepage.title} headerMode="overlay">
	{homepage.featuredProjects && homepage.featuredProjects.length !== 0 && (
		<section id="featured-projects" aria-label="Featured Projects">
			<h1 class="display-none">Featured Projects</h1>
			{homepage.featuredProjects.map((featuredProject, index) => (
				<article class="featured-project" data-index={index} style={{
					"--color-image": featuredProject.image.metadata?.palette?.darkMuted?.background,
					"--color-title": featuredProject.image.metadata?.palette?.darkMuted?.title,
				}}>
					<h2 class="featured-project-title">
						<Link class="hover-text" href={`/${homepage.baseUrls.projectsListingBaseUrl}/${featuredProject.project.slug.current}/`}>
							<strong class="featured-project-title-baseline">{featuredProject.project.title?.trim()}{featuredProject.project.subtitle && (<span class="featured-project-title-colon">:&nbsp;</span>)}</strong>{featuredProject.project.subtitle && (<span class="featured-project-subtitle">{featuredProject.project.subtitle?.trim()}</span>)}
						</Link>
					</h2>
					<Image class="featured-project-image" source={featuredProject.image} />
				</article>
			))}
		</section>
	)}
</Main>

<style lang="scss" is:global>
	#featured-projects {
		position: absolute;
		inset: 0;
		display: flex;
		overflow-x: auto;
		scroll-snap-type: x mandatory;
		scroll-snap-stop: always;
		scroll-behavior: smooth;
		scrollbar-width: none; /* Firefox */
		-ms-overflow-style: none;  /* Internet Explorer 10+ */
		&::-webkit-scrollbar { /* WebKit */
			width: 0;
			height: 0;
		}
	}
	.featured-project {
		position: relative;
		flex: 0 0 auto;
		width: 100%;
		scroll-snap-align: center;
		overflow: hidden;
	}
	.featured-project::after {
		content: "";
		position: absolute;
		inset: 0;
		display: block;
		height: calc(var(--header-height) + 1.5rem + 1.5rem + 1.5rem);
		background: linear-gradient(to bottom, var(--color-image), transparent);
		opacity: 0.5;
	}
	.featured-project-title {
		display: none;
	}
	.featured-project-title-baseline {
		font-weight: var(--font-weight-bold);
	}
	.featured-project-image {
		width: 100%;
		height: 100%;
	}
	.featured-project-image img {
		display: block;
		width: 100%;
		height: 100%;
		object-fit: cover;
	}
</style>

<script>
	const featuredProjects = document.querySelectorAll(".featured-project");
	const header: HTMLElement = document.querySelector("#header-outer");

	var currentIntersection = null;

	function observeIntersections() {
		let observer = new IntersectionObserver((entries) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					currentIntersection = entry.target;
					const titleColor = getComputedStyle(entry.target).getPropertyValue("--color-title");
					entry.target.setAttribute("aria-current", "location");
					header.style.setProperty("color", titleColor ? titleColor : null);
				} else {
					entry.target.removeAttribute("aria-current");
				}
			});
		}, {
			root: null,
			rootMargin: "0px -50% 0px -50%"
		});
		featuredProjects.forEach((featuredProject) => {
			observer.observe(featuredProject);
		});
	};

	observeIntersections();
</script>